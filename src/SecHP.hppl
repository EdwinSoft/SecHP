//*****************************************************************
//*****************************************************************
//** Nombre de la aplicación: SecHP 2.1
//**
//** Propósito: Cálculo de centroides y momentos de inercia de 
//** figuras planas compuestas
//**
//** Autor: © 2000-2020 Edwin Córdoba
//** Todos los derechos reservados.
//** Correo: edwin.cordoba@gmail.com
//**
//** Notas: 
//** 		Funciona biémn a partir del Firmware
//** 		
//**
//** Fecha modificación del programa
//** -----------------------------------------------------------------------------------------------
//**   Fecha    |   Descripción                                    									 |    Autor
//** -----------------------------------------------------------------------------------------------
//** 13-04-2020 | Corrección en signo de áreas en tablas                             | Edwin Córdoba
//** 25-04-2020 | Agregado el comando VER, que retorna la versión                    | Edwin Córdoba
//** 25-04-2020 | Agregado el comando PER, que devuelve las propiedades de un perfil | Edwin Córdoba
//** -----------------------------------------------------------------------------------------------
#pragma mode( separator(.,;) integer(h32) )

// Definición Forward de subrutinas 
SecHP();
CAL(archivo);
FIG(archivo);
TAB(archivo);
PER(id_unidad);
VER();
agregarCirculo();
editarCirculo(datoActual);
procesarCirculo(centro,radio,signo);
agregarSectorCircular();
editarSectorCircular(datoActual);
procesarSectorCircular(centro,radio,θi,θf,signo);
agregarRectangulo();
editarRectangulo(datoActual);
procesarRectangulo(puntoII,puntoSD,signo);
agregarPoligono();
editarPoligono(datoActual);
procesarPoligono(puntos,signo);
agregarPerfil();
editarPerfil(datoActual);
procesarPerfil(idPerfil,angulo,xc,yc);
procesar();
generarTabla();
rotarMomentos(Ixxc,Iyyc,Ixyc,θ); // Retorna los momentos de inercias rotados, θ corresponde al ángulo de giro de los ejes 
calcular();
modificarZoom(info);
moverSeccion(info);
dibujarSeccion();
generarSeccion();
dibujarEjes();
dibujarCentroide(x,y,radio,colorLinea,colorLlenado);
dibujarEjesPrincipales();
dibujarCuadricula();
polyLine(ptrGrob,puntos,colorLinea);
actualizarMinMax();
pantallaInicio();
acercaDe();
menuPrincipal();
menuSecundario();
menuFiguras();
menuEdicionItem();
menuResultados();
eventoMenu();
eventoArrastrar();
eventoAlargar();
nuevosDatos();
guardarDatos();
eliminarDatos();
abrirDatos();
seleccionarArchivo(titulo);
editarItems();
mostrarCfg();
ventanaMensaje(cadenas,estilo);
SECHP_STRINGFROMID(ID);

// Definición Variables Locales
LOCAL datos:={{3},{{},{},{},{},{}}}; //{{indiceUnidadesL},{circulo,sector circular,rectangulo,poligono,propiedades}}
LOCAL MinMax:={(MAXREAL,MAXREAL),(-MAXREAL,-MAXREAL)};
LOCAL xmin,xmax,ymin,ymax;
LOCAL datoMouse:={};
LOCAL salir:=0;
LOCAL menu:=0;
LOCAL listaSigno:={SECHP_STRINGFROMID(7),SECHP_STRINGFROMID(8)};
LOCAL listaUnidadesLongitud:={"m","cm","mm","ft","in"};
LOCAL lista_UnidadesLongitud:={"_m","_cm","_mm","_ft","_in"};
LOCAL listaUnidadesArea:={"m²","cm²","mm²","ft²","in²"};
LOCAL lista_UnidadesArea:={"_m^2","_cm^2","_mm^2","_ft^2","_in^2"};
LOCAL listaUnidadesMomentoInercia:={"m⁴","cm⁴","mm⁴","ft⁴","in⁴"};
LOCAL lista_UnidadesMomentoInercia:={"_m^4","_cm^4","_mm^4","_ft^4","_in^4"};


LOCAL input_centro_x,input_centro_y,input_radio,input_signo;
LOCAL input_p1_x,input_p1_y,input_p2_x,input_p2_y;
LOCAL input_θinicial,input_θfinal;
LOCAL input_puntos;
LOCAL input_perfil,input_designacion,input_angulo,input_pos_xc,input_pos_yc;

LOCAL propiedades:={};
LOCAL indiceEdicion:={0,1};//{índice de la figura,tipo de evento (0=ninguno,1=editar,2=eliminar,3=información)}
LOCAL puntoMov;
// Variables de configuración
LOCAL cfg_indiceUnidadL:=3;
LOCAL cfg_boolMostrarEjes:=1;
LOCAL cfg_boolMostrarEjesPrincipales:=1;
LOCAL cfg_boolMostrarCuadricula:=1;
LOCAL cfg_boolMostrarCentroide:=1;
// Otras configuraciones
LOCAL TOL:=0.000000001;	//Máxima tolerancia de cálculos
LOCAL pH:=318; // Pixeles reales horizontales
LOCAL pV:=216; // Pixeles reales verticales
// Configuración de colores
LOCAL colorFondo:=RGB(216,233,255);
LOCAL colorLlenado:=RGB(55,113,200);
LOCAL colorLinea:=RGB(0,130,255,10);
LOCAL colorEjes:=RGB(0,0,0);
LOCAL colorCuadricula:=RGB(179,179,179);
LOCAL colorEdicion:=RGB(233,175,175);
LOCAL colorEjesPricipales:=RGB(255,0,0);

// *********************** Datos tomado de MECHANICS OF MATERIALS, SIXTH EDITION,Ferdinand P. Beer, 2012
// Lista de Perfiles
LOCAL listaTiposPerfiles:={SECHP_STRINGFROMID(1),SECHP_STRINGFROMID(2),SECHP_STRINGFROMID(3),SECHP_STRINGFROMID(4),SECHP_STRINGFROMID(5)};
// Lista de perfiles W
LOCAL listaPerfilesW:={"W920X449(SI)","W920X201(SI)","W840X299(SI)","W840X176(SI)","W760X257(SI)","W760X147(SI)","W690X217(SI)","W690X125(SI)","W610X155(SI)","W610X101(SI)","W530X150(SI)","W530X92(SI)","W530X66(SI)","W460X158(SI)","W460X113(SI)","W460X74(SI)","W460X52(SI)","W410X114(SI)","W410X85(SI)","W410X60(SI)","W410X46.1(SI)","W410X38.8(SI)","W360X551(SI)","W360X216(SI)","W360X122(SI)","W360X101(SI)","W360X79(SI)","W360X64(SI)","W360X57.8(SI)","W360X44(SI)","W360X39(SI)","W360X32.9(SI)","W310X143(SI)","W310X107(SI)","W310X74(SI)","W310X60(SI)","W310X52(SI)","W310X44.5(SI)","W310X38.7(SI)","W310X32.7(SI)","W310X23.8(SI)","W250X167(SI)","W250X101(SI)","W250X80(SI)","W250X67(SI)","W250X58(SI)","W250X49.1(SI)","W250X44.8(SI)","W250X32.7(SI)","W250X28.4(SI)","W250X22.3(SI)","W200X86(SI)","W200X71(SI)","W200X59(SI)","W200X52(SI)","W200X46.1(SI)","W200X41.7(SI)","W200X35.9(SI)","W200X31.3(SI)","W200X26.6(SI)","W200X22.5(SI)","W200X19.3(SI)","W150X37.1(SI)","W150X29.8(SI)","W150X24(SI)","W150X18(SI)","W150X13.5(SI)","W130X28.1(SI)","W130X23.8(SI)","W100X19.3(SI)","W36X302(US)","W36X135(US)","W33X201(US)","W33X118(US)","W30X173(US)","W30X99(US)","W27X146(US)","W27X84(US)","W24X104(US)","W24X68(US)","W21X101(US)","W21X62(US)","W21X44(US)","W18X106(US)","W18X76(US)","W18X50(US)","W18X35(US)","W16X77(US)","W16X57(US)","W16X40(US)","W16X31(US)","W16X26(US)","W14X370(US)","W14X145(US)","W14X82(US)","W14X68(US)","W14X53(US)","W14X43(US)","W14X38(US)","W14X30(US)","W14X26(US)","W14X22(US)","W12X96(US)","W12X72(US)","W12X50(US)","W12X40(US)","W12X35(US)","W12X30(US)","W12X26(US)","W12X22(US)","W12X16(US)","W10X112(US)","W10X68(US)","W10X54(US)","W10X45(US)","W10X39(US)","W10X33(US)","W10X30(US)","W10X22(US)","W10X19(US)","W10X15(US)","W8X58(US)","W8X48(US)","W8X40(US)","W8X35(US)","W8X31(US)","W8X28(US)","W8X24(US)","W8X21(US)","W8X18(US)","W8X15(US)","W8X13(US)","W6X25(US)","W6X20(US)","W6X16(US)","W6X12(US)","W6X9(US)","W5X19(US)","W5X16(US)","W3X13(US)"};

// {{Área,Ixxc,Iyyc,Ixyc},{d,bf,tf,tw}}
LOCAL datosPerfilesW:={
{{57300_mm^2,8780E6_mm^4,541E6_mm^4,0_mm^4},{947_mm,424_mm,42.7_mm,24_mm}},
{{25600_mm^2,3250E6_mm^4,93.7E6_mm^4,0_mm^4},{904_mm,305_mm,20.1_mm,15.2_mm}},
{{38200_mm^2,4830E6_mm^4,312E6_mm^4,0_mm^4},{856_mm,399_mm,29.2_mm,18.2_mm}},
{{22400_mm^2,2460E6_mm^4,77.8E6_mm^4,0_mm^4},{836_mm,292_mm,18.8_mm,14_mm}},
{{32900_mm^2,3430E6_mm^4,249E6_mm^4,0_mm^4},{772_mm,381_mm,27.2_mm,16.6_mm}},
{{18800_mm^2,1660E6_mm^4,53.3E6_mm^4,0_mm^4},{754_mm,267_mm,17_mm,13.2_mm}},
{{27800_mm^2,2360E6_mm^4,184E6_mm^4,0_mm^4},{696_mm,356_mm,24.8_mm,15.4_mm}},
{{16000_mm^2,1190E6_mm^4,44.1E6_mm^4,0_mm^4},{678_mm,254_mm,16.3_mm,11.7_mm}},
{{19700_mm^2,1290E6_mm^4,108E6_mm^4,0_mm^4},{612_mm,325_mm,19.1_mm,12.7_mm}},
{{13000_mm^2,762E6_mm^4,29.3E6_mm^4,0_mm^4},{602_mm,228_mm,14.9_mm,10.5_mm}},
{{19200_mm^2,1010E6_mm^4,103E6_mm^4,0_mm^4},{544_mm,312_mm,20.3_mm,12.7_mm}},
{{11800_mm^2,554E6_mm^4,23.9E6_mm^4,0_mm^4},{533_mm,209_mm,15.6_mm,10.2_mm}},
{{8390_mm^2,351E6_mm^4,8.62E6_mm^4,0_mm^4},{526_mm,165_mm,11.4_mm,8.89_mm}},
{{20100_mm^2,795E6_mm^4,91.6E6_mm^4,0_mm^4},{475_mm,284_mm,23.9_mm,15_mm}},
{{14400_mm^2,554E6_mm^4,63.3E6_mm^4,0_mm^4},{462_mm,279_mm,17.3_mm,10.8_mm}},
{{9480_mm^2,333E6_mm^4,16.7E6_mm^4,0_mm^4},{457_mm,191_mm,14.5_mm,9.02_mm}},
{{6650_mm^2,212E6_mm^4,6.37E6_mm^4,0_mm^4},{450_mm,152_mm,10.8_mm,7.62_mm}},
{{14600_mm^2,462E6_mm^4,57.4E6_mm^4,0_mm^4},{419_mm,262_mm,19.3_mm,11.6_mm}},
{{10800_mm^2,316E6_mm^4,17.9E6_mm^4,0_mm^4},{417_mm,181_mm,18.2_mm,10.9_mm}},
{{7610_mm^2,216E6_mm^4,12E6_mm^4,0_mm^4},{406_mm,178_mm,12.8_mm,7.75_mm}},
{{5890_mm^2,156E6_mm^4,5.16E6_mm^4,0_mm^4},{404_mm,140_mm,11.2_mm,6.99_mm}},
{{4950_mm^2,125E6_mm^4,3.99E6_mm^4,0_mm^4},{399_mm,140_mm,8.76_mm,6.35_mm}},
{{70300_mm^2,2260E6_mm^4,828E6_mm^4,0_mm^4},{455_mm,419_mm,67.6_mm,42.2_mm}},
{{27500_mm^2,712E6_mm^4,282E6_mm^4,0_mm^4},{376_mm,394_mm,27.7_mm,17.3_mm}},
{{15500_mm^2,367E6_mm^4,61.6E6_mm^4,0_mm^4},{363_mm,257_mm,21.7_mm,13_mm}},
{{12900_mm^2,301E6_mm^4,50.4E6_mm^4,0_mm^4},{356_mm,254_mm,18.3_mm,10.5_mm}},
{{10100_mm^2,225E6_mm^4,24E6_mm^4,0_mm^4},{353_mm,205_mm,16.8_mm,9.4_mm}},
{{8130_mm^2,178E6_mm^4,18.8E6_mm^4,0_mm^4},{348_mm,203_mm,13.5_mm,7.75_mm}},
{{7230_mm^2,160E6_mm^4,11.1E6_mm^4,0_mm^4},{358_mm,172_mm,13.1_mm,7.87_mm}},
{{5710_mm^2,121E6_mm^4,8.16E6_mm^4,0_mm^4},{351_mm,171_mm,9.78_mm,6.86_mm}},
{{4960_mm^2,102E6_mm^4,3.71E6_mm^4,0_mm^4},{353_mm,128_mm,10.7_mm,6.48_mm}},
{{4190_mm^2,82.8E6_mm^4,2.91E6_mm^4,0_mm^4},{348_mm,127_mm,8.51_mm,5.84_mm}},
{{18200_mm^2,347E6_mm^4,112E6_mm^4,0_mm^4},{323_mm,310_mm,22.9_mm,14_mm}},
{{13600_mm^2,248E6_mm^4,81.2E6_mm^4,0_mm^4},{312_mm,305_mm,17_mm,10.9_mm}},
{{9420_mm^2,163E6_mm^4,23.4E6_mm^4,0_mm^4},{310_mm,205_mm,16.3_mm,9.4_mm}},
{{7550_mm^2,128E6_mm^4,18.4E6_mm^4,0_mm^4},{302_mm,203_mm,13.1_mm,7.49_mm}},
{{6650_mm^2,119E6_mm^4,10.2E6_mm^4,0_mm^4},{318_mm,167_mm,13.2_mm,7.62_mm}},
{{5670_mm^2,99.1E6_mm^4,8.45E6_mm^4,0_mm^4},{312_mm,166_mm,11.2_mm,6.6_mm}},
{{4940_mm^2,84.9E6_mm^4,7.2E6_mm^4,0_mm^4},{310_mm,165_mm,9.65_mm,5.84_mm}},
{{4180_mm^2,64.9E6_mm^4,1.94E6_mm^4,0_mm^4},{312_mm,102_mm,10.8_mm,6.6_mm}},
{{3040_mm^2,42.9E6_mm^4,1.17E6_mm^4,0_mm^4},{305_mm,101_mm,6.73_mm,5.59_mm}},
{{21200_mm^2,298E6_mm^4,98.2E6_mm^4,0_mm^4},{290_mm,264_mm,31.8_mm,19.2_mm}},
{{12900_mm^2,164E6_mm^4,55.8E6_mm^4,0_mm^4},{264_mm,257_mm,19.6_mm,11.9_mm}},
{{10200_mm^2,126E6_mm^4,42.9E6_mm^4,0_mm^4},{257_mm,254_mm,15.6_mm,9.4_mm}},
{{8580_mm^2,103E6_mm^4,22.2E6_mm^4,0_mm^4},{257_mm,204_mm,15.7_mm,8.89_mm}},
{{7420_mm^2,87E6_mm^4,18.7E6_mm^4,0_mm^4},{252_mm,203_mm,13.5_mm,8_mm}},
{{6260_mm^2,71.2E6_mm^4,15.2E6_mm^4,0_mm^4},{247_mm,202_mm,11_mm,7.37_mm}},
{{5700_mm^2,70.8E6_mm^4,6.95E6_mm^4,0_mm^4},{267_mm,148_mm,13_mm,7.62_mm}},
{{4190_mm^2,49.1E6_mm^4,4.75E6_mm^4,0_mm^4},{259_mm,146_mm,9.14_mm,6.1_mm}},
{{3630_mm^2,40.1E6_mm^4,1.79E6_mm^4,0_mm^4},{259_mm,102_mm,10_mm,6.35_mm}},
{{2850_mm^2,28.7E6_mm^4,1.2E6_mm^4,0_mm^4},{254_mm,102_mm,6.86_mm,5.84_mm}},
{{11000_mm^2,94.9E6_mm^4,31.3E6_mm^4,0_mm^4},{222_mm,209_mm,20.6_mm,13_mm}},
{{9100_mm^2,76.6E6_mm^4,25.3E6_mm^4,0_mm^4},{216_mm,206_mm,17.4_mm,10.2_mm}},
{{7550_mm^2,60.8E6_mm^4,20.4E6_mm^4,0_mm^4},{210_mm,205_mm,14.2_mm,9.14_mm}},
{{6650_mm^2,52.9E6_mm^4,17.7E6_mm^4,0_mm^4},{206_mm,204_mm,12.6_mm,7.87_mm}},
{{5880_mm^2,45.8E6_mm^4,15.4E6_mm^4,0_mm^4},{203_mm,203_mm,11_mm,7.24_mm}},
{{5320_mm^2,40.8E6_mm^4,9.03E6_mm^4,0_mm^4},{205_mm,166_mm,11.8_mm,7.24_mm}},
{{4570_mm^2,34.4E6_mm^4,7.62E6_mm^4,0_mm^4},{201_mm,165_mm,10.2_mm,6.22_mm}},
{{3970_mm^2,31.3E6_mm^4,4.07E6_mm^4,0_mm^4},{210_mm,134_mm,10.2_mm,6.35_mm}},
{{3390_mm^2,25.8E6_mm^4,3.32E6_mm^4,0_mm^4},{207_mm,133_mm,8.38_mm,5.84_mm}},
{{2860_mm^2,20E6_mm^4,1.42E6_mm^4,0_mm^4},{206_mm,102_mm,8_mm,6.22_mm}},
{{2480_mm^2,16.5E6_mm^4,1.14E6_mm^4,0_mm^4},{203_mm,102_mm,6.48_mm,5.84_mm}},
{{4740_mm^2,22.2E6_mm^4,7.12E6_mm^4,0_mm^4},{162_mm,154_mm,11.6_mm,8.13_mm}},
{{3790_mm^2,17.2E6_mm^4,5.54E6_mm^4,0_mm^4},{157_mm,153_mm,9.27_mm,6.6_mm}},
{{3060_mm^2,13.4E6_mm^4,1.84E6_mm^4,0_mm^4},{160_mm,102_mm,10.3_mm,6.6_mm}},
{{2290_mm^2,9.2E6_mm^4,1.24E6_mm^4,0_mm^4},{153_mm,102_mm,7.11_mm,5.84_mm}},
{{1730_mm^2,6.83E6_mm^4,0.916E6_mm^4,0_mm^4},{150_mm,100_mm,5.46_mm,4.32_mm}},
{{3590_mm^2,10.9E6_mm^4,3.8E6_mm^4,0_mm^4},{131_mm,128_mm,10.9_mm,6.86_mm}},
{{3040_mm^2,8.91E6_mm^4,3.13E6_mm^4,0_mm^4},{127_mm,127_mm,9.14_mm,6.1_mm}},
{{2470_mm^2,4.7E6_mm^4,1.61E6_mm^4,0_mm^4},{106_mm,103_mm,8.76_mm,7.11_mm}},
{{88.8_in^2,21100_in^4,1300_in^4,0_in^4},{37.3_in,16.7_in,1.68_in,0.945_in}},
{{39.7_in^2,7800_in^4,225_in^4,0_in^4},{35.6_in,12_in,0.79_in,0.6_in}},
{{59.2_in^2,11600_in^4,749_in^4,0_in^4},{33.7_in,15.7_in,1.15_in,0.715_in}},
{{34.7_in^2,5900_in^4,187_in^4,0_in^4},{32.9_in,11.5_in,0.74_in,0.55_in}},
{{51_in^2,8230_in^4,598_in^4,0_in^4},{30.4_in,15_in,1.07_in,0.655_in}},
{{29.1_in^2,3990_in^4,128_in^4,0_in^4},{29.7_in,10.5_in,0.67_in,0.52_in}},
{{43.1_in^2,5660_in^4,443_in^4,0_in^4},{27.4_in,14_in,0.975_in,0.605_in}},
{{24.8_in^2,2850_in^4,106_in^4,0_in^4},{26.7_in,10_in,0.64_in,0.46_in}},
{{30.6_in^2,3100_in^4,259_in^4,0_in^4},{24.1_in,12.8_in,0.75_in,0.5_in}},
{{20.1_in^2,1830_in^4,70.4_in^4,0_in^4},{23.7_in,8.97_in,0.585_in,0.415_in}},
{{29.8_in^2,2420_in^4,248_in^4,0_in^4},{21.4_in,12.3_in,0.8_in,0.5_in}},
{{18.3_in^2,1330_in^4,57.5_in^4,0_in^4},{21_in,8.24_in,0.615_in,0.4_in}},
{{13_in^2,843_in^4,20.7_in^4,0_in^4},{20.7_in,6.5_in,0.45_in,0.35_in}},
{{31.1_in^2,1910_in^4,220_in^4,0_in^4},{18.7_in,11.2_in,0.94_in,0.59_in}},
{{22.3_in^2,1330_in^4,152_in^4,0_in^4},{18.2_in,11_in,0.68_in,0.425_in}},
{{14.7_in^2,800_in^4,40.1_in^4,0_in^4},{18_in,7.5_in,0.57_in,0.355_in}},
{{10.3_in^2,510_in^4,15.3_in^4,0_in^4},{17.7_in,6_in,0.425_in,0.3_in}},
{{22.6_in^2,1110_in^4,138_in^4,0_in^4},{16.5_in,10.3_in,0.76_in,0.455_in}},
{{16.8_in^2,758_in^4,43.1_in^4,0_in^4},{16.4_in,7.12_in,0.715_in,0.43_in}},
{{11.8_in^2,518_in^4,28.9_in^4,0_in^4},{16_in,7_in,0.505_in,0.305_in}},
{{9.13_in^2,375_in^4,12.4_in^4,0_in^4},{15.9_in,5.53_in,0.44_in,0.275_in}},
{{7.68_in^2,301_in^4,9.59_in^4,0_in^4},{15.7_in,5.5_in,0.345_in,0.25_in}},
{{109_in^2,5440_in^4,1990_in^4,0_in^4},{17.9_in,16.5_in,2.66_in,1.66_in}},
{{42.7_in^2,1710_in^4,677_in^4,0_in^4},{14.8_in,15.5_in,1.09_in,0.68_in}},
{{24_in^2,881_in^4,148_in^4,0_in^4},{14.3_in,10.1_in,0.855_in,0.51_in}},
{{20_in^2,722_in^4,121_in^4,0_in^4},{14_in,10_in,0.72_in,0.415_in}},
{{15.6_in^2,541_in^4,57.7_in^4,0_in^4},{13.9_in,8.06_in,0.66_in,0.37_in}},
{{12.6_in^2,428_in^4,45.2_in^4,0_in^4},{13.7_in,8_in,0.53_in,0.305_in}},
{{11.2_in^2,385_in^4,26.7_in^4,0_in^4},{14.1_in,6.77_in,0.515_in,0.31_in}},
{{8.85_in^2,291_in^4,19.6_in^4,0_in^4},{13.8_in,6.73_in,0.385_in,0.27_in}},
{{7.69_in^2,245_in^4,8.91_in^4,0_in^4},{13.9_in,5.03_in,0.42_in,0.255_in}},
{{6.49_in^2,199_in^4,7_in^4,0_in^4},{13.7_in,5_in,0.335_in,0.23_in}},
{{28.2_in^2,833_in^4,270_in^4,0_in^4},{12.7_in,12.2_in,0.9_in,0.55_in}},
{{21.1_in^2,597_in^4,195_in^4,0_in^4},{12.3_in,12_in,0.67_in,0.43_in}},
{{14.6_in^2,391_in^4,56.3_in^4,0_in^4},{12.2_in,8.08_in,0.64_in,0.37_in}},
{{11.7_in^2,307_in^4,44.1_in^4,0_in^4},{11.9_in,8.01_in,0.515_in,0.295_in}},
{{10.3_in^2,285_in^4,24.5_in^4,0_in^4},{12.5_in,6.56_in,0.52_in,0.3_in}},
{{8.79_in^2,238_in^4,20.3_in^4,0_in^4},{12.3_in,6.52_in,0.44_in,0.26_in}},
{{7.65_in^2,204_in^4,17.3_in^4,0_in^4},{12.2_in,6.49_in,0.38_in,0.23_in}},
{{6.48_in^2,156_in^4,4.66_in^4,0_in^4},{12.3_in,4.03_in,0.425_in,0.26_in}},
{{4.71_in^2,103_in^4,2.82_in^4,0_in^4},{12_in,3.99_in,0.265_in,0.22_in}},
{{32.9_in^2,716_in^4,236_in^4,0_in^4},{11.4_in,10.4_in,1.25_in,0.755_in}},
{{20_in^2,394_in^4,134_in^4,0_in^4},{10.4_in,10.1_in,0.77_in,0.47_in}},
{{15.8_in^2,303_in^4,103_in^4,0_in^4},{10.1_in,10_in,0.615_in,0.37_in}},
{{13.3_in^2,248_in^4,53.4_in^4,0_in^4},{10.1_in,8.02_in,0.62_in,0.35_in}},
{{11.5_in^2,209_in^4,45_in^4,0_in^4},{9.92_in,7.99_in,0.53_in,0.315_in}},
{{9.71_in^2,171_in^4,36.6_in^4,0_in^4},{9.73_in,7.96_in,0.435_in,0.29_in}},
{{8.84_in^2,170_in^4,16.7_in^4,0_in^4},{10.5_in,5.81_in,0.51_in,0.3_in}},
{{6.49_in^2,118_in^4,11.4_in^4,0_in^4},{10.2_in,5.75_in,0.36_in,0.24_in}},
{{5.62_in^2,96.3_in^4,4.29_in^4,0_in^4},{10.2_in,4.02_in,0.395_in,0.25_in}},
{{4.41_in^2,68.9_in^4,2.89_in^4,0_in^4},{10_in,4_in,0.27_in,0.23_in}},
{{17.1_in^2,228_in^4,75.1_in^4,0_in^4},{8.75_in,8.22_in,0.81_in,0.51_in}},
{{14.1_in^2,184_in^4,60.9_in^4,0_in^4},{8.5_in,8.11_in,0.685_in,0.4_in}},
{{11.7_in^2,146_in^4,49.1_in^4,0_in^4},{8.25_in,8.07_in,0.56_in,0.36_in}},
{{10.3_in^2,127_in^4,42.6_in^4,0_in^4},{8.12_in,8.02_in,0.495_in,0.31_in}},
{{9.12_in^2,110_in^4,37.1_in^4,0_in^4},{8_in,8_in,0.435_in,0.285_in}},
{{8.24_in^2,98_in^4,21.7_in^4,0_in^4},{8.06_in,6.54_in,0.465_in,0.285_in}},
{{7.08_in^2,82.7_in^4,18.3_in^4,0_in^4},{7.93_in,6.5_in,0.4_in,0.245_in}},
{{6.16_in^2,75.3_in^4,9.77_in^4,0_in^4},{8.28_in,5.27_in,0.4_in,0.25_in}},
{{5.26_in^2,61.9_in^4,7.97_in^4,0_in^4},{8.14_in,5.25_in,0.33_in,0.23_in}},
{{4.44_in^2,48_in^4,3.41_in^4,0_in^4},{8.11_in,4.01_in,0.315_in,0.245_in}},
{{3.84_in^2,39.6_in^4,2.73_in^4,0_in^4},{7.99_in,4_in,0.255_in,0.23_in}},
{{7.34_in^2,53.4_in^4,17.1_in^4,0_in^4},{6.38_in,6.08_in,0.455_in,0.32_in}},
{{5.87_in^2,41.4_in^4,13.3_in^4,0_in^4},{6.2_in,6.02_in,0.365_in,0.26_in}},
{{4.74_in^2,32.1_in^4,4.43_in^4,0_in^4},{6.28_in,4.03_in,0.405_in,0.26_in}},
{{3.55_in^2,22.1_in^4,2.99_in^4,0_in^4},{6.03_in,4_in,0.28_in,0.23_in}},
{{2.68_in^2,16.4_in^4,2.2_in^4,0_in^4},{5.9_in,3.94_in,0.215_in,0.17_in}},
{{5.56_in^2,26.3_in^4,9.13_in^4,0_in^4},{5.15_in,5.03_in,0.43_in,0.27_in}},
{{4.71_in^2,21.4_in^4,7.51_in^4,0_in^4},{5.01_in,5_in,0.36_in,0.24_in}},
{{3.83_in^2,11.3_in^4,3.86_in^4,0_in^4},{4.16_in,4.06_in,0.345_in,0.28_in}}
};
LOCAL listaPerfilesS:={"S610X180(SI)","S610X158(SI)","S610X149(SI)","S610X134(SI)","S610X119(SI)","S510X143(SI)","S510X128(SI)","S510X112(SI)","S510X98.2(SI)","S460X104(SI)","S460X81.4(SI)","S380X74(SI)","S380X64(SI)","S310X74(SI)","S310X60.7(SI)","S310X52(SI)","S310X47.3(SI)","S250X52(SI)","S250X37.8(SI)","S200X34(SI)","S200X27.4(SI)","S150X25.7(SI)","S150X18.6(SI)","S130X15(SI)","S100X14.1(SI)","S100X11.5(SI)","S75X11.2(SI)","S75X8.5(SI)","S24X121(US)","S24X106(US)","S24X100(US)","S24X90(US)","S24X80(US)","S20X96(US)","S20X86(US)","S20X75(US)","S20X66(US)","S18X70(US)","S18X54.7(US)","S15X50(US)","S15X42.9(US)","S12X50(US)","S12X40.8(US)","S12X35(US)","S12X31.8(US)","S10X35(US)","S10X25.4(US)","S8X23(US)","S8X18.4(US)","S6X17.2(US)","S6X12.5(US)","S5X10(US)","S4X9.5(US)","S4X7.7(US)","S3X7.5(US)","S3X5.7(US)"};

// {{Área,Ixxc,Iyyc,Ixyc},{d,bf,tf,tw}}
LOCAL datosPerfilesS:={
{{22900_mm^2,1320E6_mm^4,34.5E6_mm^4,0_mm^4},{622_mm,204_mm,27.7_mm,20.3_mm}},
{{20100_mm^2,1220E6_mm^4,32E6_mm^4,0_mm^4},{622_mm,200_mm,27.7_mm,15.7_mm}},
{{18900_mm^2,991E6_mm^4,19.7E6_mm^4,0_mm^4},{610_mm,184_mm,22.1_mm,18.9_mm}},
{{17100_mm^2,937E6_mm^4,18.6E6_mm^4,0_mm^4},{610_mm,181_mm,22.1_mm,15.9_mm}},
{{15200_mm^2,874E6_mm^4,17.5E6_mm^4,0_mm^4},{610_mm,178_mm,22.1_mm,12.7_mm}},
{{18200_mm^2,695E6_mm^4,20.8E6_mm^4,0_mm^4},{516_mm,183_mm,23.4_mm,20.3_mm}},
{{16300_mm^2,653E6_mm^4,19.4E6_mm^4,0_mm^4},{516_mm,179_mm,23.4_mm,16.8_mm}},
{{14200_mm^2,533E6_mm^4,12.3E6_mm^4,0_mm^4},{508_mm,162_mm,20.2_mm,16.1_mm}},
{{12500_mm^2,495E6_mm^4,11.4E6_mm^4,0_mm^4},{508_mm,159_mm,20.2_mm,12.8_mm}},
{{13200_mm^2,384E6_mm^4,10E6_mm^4,0_mm^4},{457_mm,159_mm,17.6_mm,18.1_mm}},
{{10300_mm^2,333E6_mm^4,8.62E6_mm^4,0_mm^4},{457_mm,152_mm,17.6_mm,11.7_mm}},
{{9480_mm^2,202E6_mm^4,6.49E6_mm^4,0_mm^4},{381_mm,143_mm,15.8_mm,14_mm}},
{{8130_mm^2,186E6_mm^4,5.95E6_mm^4,0_mm^4},{381_mm,140_mm,15.8_mm,10.4_mm}},
{{9420_mm^2,126E6_mm^4,6.49E6_mm^4,0_mm^4},{305_mm,139_mm,16.7_mm,17.4_mm}},
{{7680_mm^2,112E6_mm^4,5.62E6_mm^4,0_mm^4},{305_mm,133_mm,16.7_mm,11.7_mm}},
{{6580_mm^2,94.9E6_mm^4,4.1E6_mm^4,0_mm^4},{305_mm,129_mm,13.8_mm,10.9_mm}},
{{6010_mm^2,90.3E6_mm^4,3.88E6_mm^4,0_mm^4},{305_mm,127_mm,13.8_mm,8.89_mm}},
{{6650_mm^2,61.2E6_mm^4,3.45E6_mm^4,0_mm^4},{254_mm,125_mm,12.5_mm,15.1_mm}},
{{4810_mm^2,51.2E6_mm^4,2.8E6_mm^4,0_mm^4},{254_mm,118_mm,12.5_mm,7.9_mm}},
{{4360_mm^2,26.9E6_mm^4,1.78E6_mm^4,0_mm^4},{203_mm,106_mm,10.8_mm,11.2_mm}},
{{3480_mm^2,23.9E6_mm^4,1.54E6_mm^4,0_mm^4},{203_mm,102_mm,10.8_mm,6.88_mm}},
{{3260_mm^2,10.9E6_mm^4,0.953E6_mm^4,0_mm^4},{152_mm,90.7_mm,9.12_mm,11.8_mm}},
{{2360_mm^2,9.16E6_mm^4,0.749E6_mm^4,0_mm^4},{152_mm,84.6_mm,9.12_mm,5.89_mm}},
{{1890_mm^2,5.12E6_mm^4,0.495E6_mm^4,0_mm^4},{127_mm,76.2_mm,8.28_mm,5.44_mm}},
{{1800_mm^2,2.81E6_mm^4,0.369E6_mm^4,0_mm^4},{102_mm,71.1_mm,7.44_mm,8.28_mm}},
{{1460_mm^2,2.52E6_mm^4,0.311E6_mm^4,0_mm^4},{102_mm,67.6_mm,7.44_mm,4.9_mm}},
{{1420_mm^2,1.21E6_mm^4,0.241E6_mm^4,0_mm^4},{76.2_mm,63.8_mm,6.6_mm,8.86_mm}},
{{1070_mm^2,1.04E6_mm^4,0.186E6_mm^4,0_mm^4},{76.2_mm,59.2_mm,6.6_mm,4.32_mm}},
{{35.5_in^2,3160_in^4,83_in^4,0_in^4},{24.5_in,8.05_in,1.09_in,0.8_in}},
{{31.1_in^2,2940_in^4,76.8_in^4,0_in^4},{24.5_in,7.87_in,1.09_in,0.62_in}},
{{29.3_in^2,2380_in^4,47.4_in^4,0_in^4},{24_in,7.25_in,0.87_in,0.745_in}},
{{26.5_in^2,2250_in^4,44.7_in^4,0_in^4},{24_in,7.13_in,0.87_in,0.625_in}},
{{23.5_in^2,2100_in^4,42_in^4,0_in^4},{24_in,7_in,0.87_in,0.5_in}},
{{28.2_in^2,1670_in^4,49.9_in^4,0_in^4},{20.3_in,7.2_in,0.92_in,0.8_in}},
{{25.3_in^2,1570_in^4,46.6_in^4,0_in^4},{20.3_in,7.06_in,0.92_in,0.66_in}},
{{22_in^2,1280_in^4,29.5_in^4,0_in^4},{20_in,6.39_in,0.795_in,0.635_in}},
{{19.4_in^2,1190_in^4,27.5_in^4,0_in^4},{20_in,6.26_in,0.795_in,0.505_in}},
{{20.5_in^2,923_in^4,24_in^4,0_in^4},{18_in,6.25_in,0.691_in,0.711_in}},
{{16_in^2,801_in^4,20.7_in^4,0_in^4},{18_in,6_in,0.691_in,0.461_in}},
{{14.7_in^2,485_in^4,15.6_in^4,0_in^4},{15_in,5.64_in,0.622_in,0.55_in}},
{{12.6_in^2,446_in^4,14.3_in^4,0_in^4},{15_in,5.5_in,0.622_in,0.411_in}},
{{14.6_in^2,303_in^4,15.6_in^4,0_in^4},{12_in,5.48_in,0.659_in,0.687_in}},
{{11.9_in^2,270_in^4,13.5_in^4,0_in^4},{12_in,5.25_in,0.659_in,0.462_in}},
{{10.2_in^2,228_in^4,9.84_in^4,0_in^4},{12_in,5.08_in,0.544_in,0.428_in}},
{{9.31_in^2,217_in^4,9.33_in^4,0_in^4},{12_in,5_in,0.544_in,0.35_in}},
{{10.3_in^2,147_in^4,8.3_in^4,0_in^4},{10_in,4.94_in,0.491_in,0.594_in}},
{{7.45_in^2,123_in^4,6.73_in^4,0_in^4},{10_in,4.66_in,0.491_in,0.311_in}},
{{6.76_in^2,64.7_in^4,4.27_in^4,0_in^4},{8_in,4.17_in,0.425_in,0.441_in}},
{{5.4_in^2,57.5_in^4,3.69_in^4,0_in^4},{8_in,4_in,0.425_in,0.271_in}},
{{5.06_in^2,26.2_in^4,2.29_in^4,0_in^4},{6_in,3.57_in,0.359_in,0.465_in}},
{{3.66_in^2,22_in^4,1.8_in^4,0_in^4},{6_in,3.33_in,0.359_in,0.232_in}},
{{2.93_in^2,12.3_in^4,1.19_in^4,0_in^4},{5_in,3_in,0.326_in,0.214_in}},
{{2.79_in^2,6.76_in^4,0.887_in^4,0_in^4},{4_in,2.8_in,0.293_in,0.326_in}},
{{2.26_in^2,6.05_in^4,0.748_in^4,0_in^4},{4_in,2.66_in,0.293_in,0.193_in}},
{{2.2_in^2,2.91_in^4,0.578_in^4,0_in^4},{3_in,2.51_in,0.26_in,0.349_in}},
{{1.66_in^2,2.5_in^4,0.447_in^4,0_in^4},{3_in,2.33_in,0.26_in,0.17_in}}
};

LOCAL listaPerfilesC:={"C380X74(SI)","C380X60(SI)","C380X50.4(SI)","C310X45(SI)","C310X37(SI)","C310X30.8(SI)","C250X45(SI)","C250X37(SI)","C250X30(SI)","C250X22.8(SI)","C230X30(SI)","C230X22(SI)","C230X19.9(SI)","C200X27.9(SI)","C200X20.5(SI)","C200X17.1(SI)","C180X18.2(SI)","C180X14.6(SI)","C150X19.3(SI)","C150X15.6(SI)","C150X12.2(SI)","C130X13(SI)","C130X10.4(SI)","C100X10.8(SI)","C100X8(SI)","C75X8.9(SI)","C75X7.4(SI)","C75X6.1(SI)","C15X50(US)","C15X40(US)","C15X33.9(US)","C12X30(US)","C12X25(US)","C12X20.7(US)","C10X30(US)","C10X25(US)","C10X20(US)","C10X15.3(US)","C9X20(US)","C9X15(US)","C9X13.4(US)","C8X18.7(US)","C8X13.7(US)","C8X11.5(US)","C7X12.2(US)","C7X9.8(US)","C6X13(US)","C6X10.5(US)","C6X8.2(US)","C5X9(US)","C5X6.7(US)","C4X7.2(US)","C4X5.4(US)","C3X6(US)","C3X5(US)","C3X4.1(US)"};

// {{Área,Ixxc,Iyyc,Ixyc,xc},{d,bf,tf,tw}}
LOCAL datosPerfilesC:={
{{9480_mm^2,168E6_mm^4,4.58E6_mm^4,0_mm^4,20.3_mm},{381_mm,94.5_mm,16.5_mm,18.2_mm}},
{{7610_mm^2,145E6_mm^4,3.82E6_mm^4,0_mm^4,19.8_mm},{381_mm,89.4_mm,16.5_mm,13.2_mm}},
{{6450_mm^2,131E6_mm^4,3.36E6_mm^4,0_mm^4,20_mm},{381_mm,86.4_mm,16.5_mm,10.2_mm}},
{{5680_mm^2,67.4E6_mm^4,2.13E6_mm^4,0_mm^4,17.1_mm},{305_mm,80.5_mm,12.7_mm,13_mm}},
{{4740_mm^2,59.9E6_mm^4,1.85E6_mm^4,0_mm^4,17.1_mm},{305_mm,77.5_mm,12.7_mm,9.83_mm}},
{{3920_mm^2,53.7E6_mm^4,1.61E6_mm^4,0_mm^4,17.7_mm},{305_mm,74.7_mm,12.7_mm,7.16_mm}},
{{5680_mm^2,42.9E6_mm^4,1.64E6_mm^4,0_mm^4,16.5_mm},{254_mm,77_mm,11.1_mm,17.1_mm}},
{{4740_mm^2,37.9E6_mm^4,1.39E6_mm^4,0_mm^4,15.7_mm},{254_mm,73.4_mm,11.1_mm,13.4_mm}},
{{3790_mm^2,32.8E6_mm^4,1.17E6_mm^4,0_mm^4,15.4_mm},{254_mm,69.6_mm,11.1_mm,9.63_mm}},
{{2890_mm^2,28E6_mm^4,0.945E6_mm^4,0_mm^4,16.1_mm},{254_mm,66_mm,11.1_mm,6.1_mm}},
{{3790_mm^2,25.3E6_mm^4,1E6_mm^4,0_mm^4,14.8_mm},{229_mm,67.3_mm,10.5_mm,11.4_mm}},
{{2850_mm^2,21.2E6_mm^4,0.795E6_mm^4,0_mm^4,14.9_mm},{229_mm,63.2_mm,10.5_mm,7.24_mm}},
{{2540_mm^2,19.9E6_mm^4,0.728E6_mm^4,0_mm^4,15.3_mm},{229_mm,61.7_mm,10.5_mm,5.92_mm}},
{{3550_mm^2,18.3E6_mm^4,0.82E6_mm^4,0_mm^4,14.4_mm},{203_mm,64.3_mm,9.91_mm,12.4_mm}},
{{2610_mm^2,15E6_mm^4,0.633E6_mm^4,0_mm^4,14.1_mm},{203_mm,59.4_mm,9.91_mm,7.7_mm}},
{{2170_mm^2,13.5E6_mm^4,0.545E6_mm^4,0_mm^4,14.5_mm},{203_mm,57.4_mm,9.91_mm,5.59_mm}},
{{2320_mm^2,10.1E6_mm^4,0.483E6_mm^4,0_mm^4,13.3_mm},{178_mm,55.6_mm,9.3_mm,7.98_mm}},
{{1850_mm^2,8.82E6_mm^4,0.398E6_mm^4,0_mm^4,13.7_mm},{178_mm,53.1_mm,9.3_mm,5.33_mm}},
{{2460_mm^2,7.2E6_mm^4,0.437E6_mm^4,0_mm^4,13.1_mm},{152_mm,54.9_mm,8.71_mm,11.1_mm}},
{{1990_mm^2,6.29E6_mm^4,0.358E6_mm^4,0_mm^4,12.7_mm},{152_mm,51.6_mm,8.71_mm,7.98_mm}},
{{1540_mm^2,5.45E6_mm^4,0.286E6_mm^4,0_mm^4,13_mm},{152_mm,48.8_mm,8.71_mm,5.08_mm}},
{{1700_mm^2,3.7E6_mm^4,0.26E6_mm^4,0_mm^4,12.1_mm},{127_mm,48_mm,8.13_mm,8.26_mm}},
{{1270_mm^2,3.11E6_mm^4,0.196E6_mm^4,0_mm^4,12.3_mm},{127_mm,44.5_mm,8.13_mm,4.83_mm}},
{{1370_mm^2,1.91E6_mm^4,0.177E6_mm^4,0_mm^4,11.7_mm},{102_mm,43.7_mm,7.52_mm,8.15_mm}},
{{1020_mm^2,1.6E6_mm^4,0.13E6_mm^4,0_mm^4,11.6_mm},{102_mm,40.1_mm,7.52_mm,4.67_mm}},
{{1140_mm^2,0.862E6_mm^4,0.125E6_mm^4,0_mm^4,11.6_mm},{76.2_mm,40.6_mm,6.93_mm,9.04_mm}},
{{948_mm^2,0.77E6_mm^4,0.1E6_mm^4,0_mm^4,11.2_mm},{76.2_mm,38.1_mm,6.93_mm,6.55_mm}},
{{774_mm^2,0.687E6_mm^4,0.0795E6_mm^4,0_mm^4,11.1_mm},{76.2_mm,35.8_mm,6.93_mm,4.32_mm}},
{{14.7_in^2,404_in^4,11_in^4,0_in^4,0.799_in},{15_in,3.72_in,0.65_in,0.716_in}},
{{11.8_in^2,348_in^4,9.17_in^4,0_in^4,0.778_in},{15_in,3.52_in,0.65_in,0.52_in}},
{{10_in^2,315_in^4,8.07_in^4,0_in^4,0.788_in},{15_in,3.4_in,0.65_in,0.4_in}},
{{8.81_in^2,162_in^4,5.12_in^4,0_in^4,0.674_in},{12_in,3.17_in,0.501_in,0.51_in}},
{{7.34_in^2,144_in^4,4.45_in^4,0_in^4,0.674_in},{12_in,3.05_in,0.501_in,0.387_in}},
{{6.08_in^2,129_in^4,3.86_in^4,0_in^4,0.698_in},{12_in,2.94_in,0.501_in,0.282_in}},
{{8.81_in^2,103_in^4,3.93_in^4,0_in^4,0.649_in},{10_in,3.03_in,0.436_in,0.673_in}},
{{7.34_in^2,91.1_in^4,3.34_in^4,0_in^4,0.617_in},{10_in,2.89_in,0.436_in,0.526_in}},
{{5.87_in^2,78.9_in^4,2.8_in^4,0_in^4,0.606_in},{10_in,2.74_in,0.436_in,0.379_in}},
{{4.48_in^2,67.3_in^4,2.27_in^4,0_in^4,0.634_in},{10_in,2.6_in,0.436_in,0.24_in}},
{{5.87_in^2,60.9_in^4,2.41_in^4,0_in^4,0.583_in},{9_in,2.65_in,0.413_in,0.448_in}},
{{4.41_in^2,51_in^4,1.91_in^4,0_in^4,0.586_in},{9_in,2.49_in,0.413_in,0.285_in}},
{{3.94_in^2,47.8_in^4,1.75_in^4,0_in^4,0.601_in},{9_in,2.43_in,0.413_in,0.233_in}},
{{5.51_in^2,43.9_in^4,1.97_in^4,0_in^4,0.565_in},{8_in,2.53_in,0.39_in,0.487_in}},
{{4.04_in^2,36.1_in^4,1.52_in^4,0_in^4,0.554_in},{8_in,2.34_in,0.39_in,0.303_in}},
{{3.37_in^2,32.5_in^4,1.31_in^4,0_in^4,0.572_in},{8_in,2.26_in,0.39_in,0.22_in}},
{{3.6_in^2,24.2_in^4,1.16_in^4,0_in^4,0.525_in},{7_in,2.19_in,0.366_in,0.314_in}},
{{2.87_in^2,21.2_in^4,0.957_in^4,0_in^4,0.541_in},{7_in,2.09_in,0.366_in,0.21_in}},
{{3.81_in^2,17.3_in^4,1.05_in^4,0_in^4,0.514_in},{6_in,2.16_in,0.343_in,0.437_in}},
{{3.08_in^2,15.1_in^4,0.86_in^4,0_in^4,0.5_in},{6_in,2.03_in,0.343_in,0.314_in}},
{{2.39_in^2,13.1_in^4,0.687_in^4,0_in^4,0.512_in},{6_in,1.92_in,0.343_in,0.2_in}},
{{2.64_in^2,8.89_in^4,0.624_in^4,0_in^4,0.478_in},{5_in,1.89_in,0.32_in,0.325_in}},
{{1.97_in^2,7.48_in^4,0.47_in^4,0_in^4,0.484_in},{5_in,1.75_in,0.32_in,0.19_in}},
{{2.13_in^2,4.58_in^4,0.425_in^4,0_in^4,0.459_in},{4_in,1.72_in,0.296_in,0.321_in}},
{{1.58_in^2,3.85_in^4,0.312_in^4,0_in^4,0.457_in},{4_in,1.58_in,0.296_in,0.184_in}},
{{1.76_in^2,2.07_in^4,0.3_in^4,0_in^4,0.455_in},{3_in,1.6_in,0.273_in,0.356_in}},
{{1.47_in^2,1.85_in^4,0.241_in^4,0_in^4,0.439_in},{3_in,1.5_in,0.273_in,0.258_in}},
{{1.2_in^2,1.65_in^4,0.191_in^4,0_in^4,0.437_in},{3_in,1.41_in,0.273_in,0.17_in}}
};

LOCAL listaPerfilesLigual:={"L203X203X25.4(SI)","L203X203X19(SI)","L203X203X12.7(SI)","L152X152X25.4(SI)","L152X152X19(SI)","L152X152X15.9(SI)","L152X152X12.7(SI)","L152X152X9.5(SI)","L127X127X19(SI)","L127X127X15.9(SI)","L127X127X12.7(SI)","L127X127X9.5(SI)","L102X102X19(SI)","L102X102X15.9(SI)","L102X102X12.7(SI)","L102X102X9.5(SI)","L102X102X6.4(SI)","L89X89X12.7(SI)","L89X89X9.5(SI)","L89X89X6.4(SI)","L76X76X12.7(SI)","L76X76X9.5(SI)","L76X76X6.4(SI)","L64X64X12.7(SI)","L64X64X9.5(SI)","L64X64X6.4(SI)","L64X64X4.8(SI)","L51X51X9.5(SI)","L51X51X6.4(SI)","L51X51X3.2(SI)","L8X8X1(US)","L8X8X3⁄4(US)","L8X8X1⁄2(US)","L6X6X1(US)","L6X6X3⁄4(US)","L6X6X5⁄8(US)","L6X6X1⁄2(US)","L6X6X3⁄8(US)","L5X5X3⁄4(US)","L5X5X5⁄8(US)","L5X5X1⁄2(US)","L5X5X3⁄8(US)","L4X4X3⁄4(US)","L4X4X5⁄8(US)","L4X4X1⁄2(US)","L4X4X3⁄8(US)","L4X4X1⁄4(US)","L3½X3½X1⁄2(US)","L3½X3½X3⁄8(US)","L3½X3½X1⁄4(US)","L3X3X1⁄2(US)","L3X3X3⁄8(US)","L3X3X1⁄4(US)","L2½X2½X1⁄2(US)","L2½X2½X3⁄8(US)","L2½X2½X1⁄4(US)","L2½X2½X3⁄16(US)","L2X2X3⁄8(US)","L2X2X1⁄4(US)","L2X2X1⁄8(US)"};

// {{Área,Ixxc,Iyyc,Ixyc,xc=yc},{d,bf,tf}}
LOCAL datosPerfilesLigual:={
{{9680_mm^2,37.1E6_mm^4,37.1E6_mm^4,-21920211.200_mm^4,59.9_mm},{203_mm,203_mm,25.4_mm}},
{{7350_mm^2,29.1E6_mm^4,29.1E6_mm^4,-17398726.500_mm^4,57.4_mm},{203_mm,203_mm,19_mm}},
{{5000_mm^2,20.3E6_mm^4,20.3E6_mm^4,-12139200.000_mm^4,55.1_mm},{203_mm,203_mm,12.7_mm}},
{{7100_mm^2,14.7E6_mm^4,14.7E6_mm^4,-8437161.000_mm^4,47.2_mm},{152_mm,152_mm,25.4_mm}},
{{5460_mm^2,11.7E6_mm^4,11.7E6_mm^4,-6883788.600_mm^4,45_mm},{152_mm,152_mm,19_mm}},
{{4600_mm^2,10E6_mm^4,10E6_mm^4,-5942386.000_mm^4,43.7_mm},{152_mm,152_mm,15.9_mm}},
{{3720_mm^2,8.28E6_mm^4,8.28E6_mm^4,-4932000.000_mm^4,42.4_mm},{152_mm,152_mm,12.7_mm}},
{{2830_mm^2,6.41E6_mm^4,6.41E6_mm^4,-3828926.800_mm^4,41.1_mm},{152_mm,152_mm,9.5_mm}},
{{4480_mm^2,6.53E6_mm^4,6.53E6_mm^4,-3796796.800_mm^4,38.6_mm},{127_mm,127_mm,19_mm}},
{{3780_mm^2,5.66E6_mm^4,5.66E6_mm^4,-3335148.800_mm^4,37.3_mm},{127_mm,127_mm,15.9_mm}},
{{3060_mm^2,4.7E6_mm^4,4.7E6_mm^4,-2802769.400_mm^4,36.1_mm},{127_mm,127_mm,12.7_mm}},
{{2330_mm^2,3.65E6_mm^4,3.65E6_mm^4,-2193750.000_mm^4,34.8_mm},{127_mm,127_mm,9.5_mm}},
{{3510_mm^2,3.17E6_mm^4,3.17E6_mm^4,-1807804.100_mm^4,32.3_mm},{102_mm,102_mm,19_mm}},
{{2970_mm^2,2.76E6_mm^4,2.76E6_mm^4,-1607372.700_mm^4,31_mm},{102_mm,102_mm,15.9_mm}},
{{2420_mm^2,2.3E6_mm^4,2.3E6_mm^4,-1360822.200_mm^4,30_mm},{102_mm,102_mm,12.7_mm}},
{{1850_mm^2,1.8E6_mm^4,1.8E6_mm^4,-1074726.000_mm^4,28.7_mm},{102_mm,102_mm,9.5_mm}},
{{1250_mm^2,1.25E6_mm^4,1.25E6_mm^4,-754987.500_mm^4,27.4_mm},{102_mm,102_mm,6.4_mm}},
{{2100_mm^2,1.51E6_mm^4,1.51E6_mm^4,-888736.000_mm^4,26.7_mm},{89_mm,89_mm,12.7_mm}},
{{1600_mm^2,1.19E6_mm^4,1.19E6_mm^4,-711136.000_mm^4,25.4_mm},{89_mm,89_mm,9.5_mm}},
{{1090_mm^2,0.832E6_mm^4,0.832E6_mm^4,-498187.500_mm^4,24.2_mm},{89_mm,89_mm,6.4_mm}},
{{1770_mm^2,0.916E6_mm^4,0.916E6_mm^4,-533520.700_mm^4,23.6_mm},{76_mm,76_mm,12.7_mm}},
{{1360_mm^2,0.728E6_mm^4,0.728E6_mm^4,-430105.600_mm^4,22.5_mm},{76_mm,76_mm,9.5_mm}},
{{929_mm^2,0.512E6_mm^4,0.512E6_mm^4,-305752.710_mm^4,21.2_mm},{76_mm,76_mm,6.4_mm}},
{{1450_mm^2,0.508E6_mm^4,0.508E6_mm^4,-292182.000_mm^4,20.4_mm},{64_mm,64_mm,12.7_mm}},
{{1120_mm^2,0.405E6_mm^4,0.405E6_mm^4,-238299.200_mm^4,19.3_mm},{64_mm,64_mm,9.5_mm}},
{{768_mm^2,0.288E6_mm^4,0.288E6_mm^4,-173690.880_mm^4,18.1_mm},{64_mm,64_mm,6.4_mm}},
{{581_mm^2,0.223E6_mm^4,0.223E6_mm^4,-136523.960_mm^4,17.4_mm},{64_mm,64_mm,4.8_mm}},
{{877_mm^2,0.198E6_mm^4,0.198E6_mm^4,-113772.920_mm^4,16.1_mm},{51_mm,51_mm,9.5_mm}},
{{605_mm^2,0.144E6_mm^4,0.144E6_mm^4,-85539.516_mm^4,14.9_mm},{51_mm,51_mm,6.4_mm}},
{{312_mm^2,0.0787E6_mm^4,0.0787E6_mm^4,-47935.271_mm^4,13.6_mm},{51_mm,51_mm,3.2_mm}},
{{15_in^2,89.1_in^4,89.1_in^4,-52.596_in^4,2.36_in},{8_in,8_in,1_in}},
{{11.4_in^2,69.9_in^4,69.9_in^4,-41.800_in^4,2.26_in},{8_in,8_in,0.750_in}},
{{7.75_in^2,48.8_in^4,48.8_in^4,-29.207_in^4,2.17_in},{8_in,8_in,0.500_in}},
{{11_in^2,35.4_in^4,35.4_in^4,-20.342_in^4,1.86_in},{6_in,6_in,1.000_in}},
{{8.46_in^2,28.1_in^4,28.1_in^4,-16.519_in^4,1.77_in},{6_in,6_in,0.750_in}},
{{7.13_in^2,24.1_in^4,24.1_in^4,-14.340_in^4,1.72_in},{6_in,6_in,0.625_in}},
{{5.77_in^2,19.9_in^4,19.9_in^4,-11.866_in^4,1.67_in},{6_in,6_in,0.500_in}},
{{4.38_in^2,15.4_in^4,15.4_in^4,-9.197_in^4,1.62_in},{6_in,6_in,0.375_in}},
{{6.94_in^2,15.7_in^4,15.7_in^4,-9.143_in^4,1.52_in},{5_in,5_in,0.750_in}},
{{5.86_in^2,13.6_in^4,13.6_in^4,-8.029_in^4,1.47_in},{5_in,5_in,0.625_in}},
{{4.75_in^2,11.3_in^4,11.3_in^4,-6.738_in^4,1.42_in},{5_in,5_in,0.500_in}},
{{3.61_in^2,8.76_in^4,8.76_in^4,-5.250_in^4,1.37_in},{5_in,5_in,0.375_in}},
{{5.44_in^2,7.62_in^4,7.62_in^4,-4.361_in^4,1.27_in},{4_in,4_in,0.750_in}},
{{4.61_in^2,6.62_in^4,6.62_in^4,-3.858_in^4,1.22_in},{4_in,4_in,0.625_in}},
{{3.75_in^2,5.52_in^4,5.52_in^4,-3.262_in^4,1.18_in},{4_in,4_in,0.500_in}},
{{2.86_in^2,4.32_in^4,4.32_in^4,-2.584_in^4,1.13_in},{4_in,4_in,0.375_in}},
{{1.94_in^2,3_in^4,3_in^4,-1.811_in^4,1.08_in},{4_in,4_in,0.250_in}},
{{3.25_in^2,3.63_in^4,3.63_in^4,-2.132_in^4,1.05_in},{3.5_in,3.5_in,0.500_in}},
{{2.48_in^2,2.86_in^4,2.86_in^4,-1.703_in^4,1_in},{3.5_in,3.5_in,0.375_in}},
{{1.69_in^2,2_in^4,2_in^4,-1.200_in^4,0.954_in},{3.5_in,3.5_in,0.250_in}},
{{2.75_in^2,2.2_in^4,2.2_in^4,-1.275_in^4,0.929_in},{3_in,3_in,0.500_in}},
{{2.11_in^2,1.75_in^4,1.75_in^4,-1.038_in^4,0.884_in},{3_in,3_in,0.375_in}},
{{1.44_in^2,1.23_in^4,1.23_in^4,-0.737_in^4,0.836_in},{3_in,3_in,0.250_in}},
{{2.25_in^2,1.22_in^4,1.22_in^4,-0.699_in^4,0.803_in},{2.5_in,2.5_in,0.500_in}},
{{1.73_in^2,0.972_in^4,0.972_in^4,-0.572_in^4,0.758_in},{2.5_in,2.5_in,0.375_in}},
{{1.19_in^2,0.692_in^4,0.692_in^4,-0.416_in^4,0.711_in},{2.5_in,2.5_in,0.250_in}},
{{0.9_in^2,0.535_in^4,0.535_in^4,-0.326_in^4,0.687_in},{2.5_in,2.5_in,0.188_in}},
{{1.36_in^2,0.476_in^4,0.476_in^4,-0.273_in^4,0.632_in},{2_in,2_in,0.375_in}},
{{0.938_in^2,0.346_in^4,0.346_in^4,-0.206_in^4,0.586_in},{2_in,2_in,0.250_in}},
{{0.484_in^2,0.189_in^4,0.189_in^4,-0.115_in^4,0.534_in},{2_in,2_in,0.125_in}}
};


LOCAL listaPerfilesLdesigual:={"L203X152X25.4(SI)","L203X152X19(SI)","L203X152X12.7(SI)","L152X102X19(SI)","L152X102X12.7(SI)","L152X102X9.5(SI)","L127X76X12.7(SI)","L127X76X9.5(SI)","L127X76X6.4(SI)","L102X76X12.7(SI)","L102X76X9.5(SI)","L102X76X6.4(SI)","L89X64X12.7(SI)","L89X64X9.5(SI)","L89X64X6.4(SI)","L76X51X12.7(SI)","L76X51X9.5(SI)","L76X51X6.4(SI)","L64X51X9.5(SI)","L64X51X6.4(SI)","L8X6X1(US)","L8X6X3⁄4(US)","L8X6X1⁄2(US)","L6X4X3⁄4(US)","L6X4X1⁄2(US)","L6X4X3⁄8(US)","L5X3X1⁄2(US)","L5X3X3⁄8(US)","L5X3X1⁄4(US)","L4X3X1⁄2(US)","L4X3X3⁄8(US)","L4X3X1⁄4(US)","L3½X2½X1⁄2(US)","L3½X2½X3⁄8(US)","L3½X2½X1⁄4(US)","L3X2X1⁄2(US)","L3X2X3⁄8(US)","L3X2X1⁄4(US)","L2½X2X3⁄8(US)","L2½X2X1⁄4(US)"};

// {{Área,Ixxc,Iyyc,Ixyc,xc,yc},{d,bf,tf}}
LOCAL datosPerfilesLdesigual:={
{{8390_mm^2,33.7E6_mm^4,16.1E6_mm^4,-16038062.500_mm^4,41.9_mm,67.3_mm},{203_mm,152_mm,25.4_mm}},
{{6410_mm^2,26.4E6_mm^4,12.8E6_mm^4,-12703865.600_mm^4,39.6_mm,64.8_mm},{203_mm,152_mm,19_mm}},
{{4350_mm^2,18.5E6_mm^4,9.03E6_mm^4,-9027850.000_mm^4,37.1_mm,62.5_mm},{203_mm,152_mm,12.7_mm}},
{{4480_mm^2,10.2E6_mm^4,3.59E6_mm^4,-4785412.800_mm^4,27.2_mm,52.6_mm},{152_mm,102_mm,19_mm}},
{{3060_mm^2,7.2E6_mm^4,2.59E6_mm^4,-3427393.400_mm^4,24.9_mm,50.3_mm},{152_mm,102_mm,12.7_mm}},
{{2330_mm^2,5.58E6_mm^4,2.02E6_mm^4,-2662004.700_mm^4,23.7_mm,49_mm},{152_mm,102_mm,9.5_mm}},
{{2420_mm^2,3.93E6_mm^4,1.06E6_mm^4,-1852030.200_mm^4,18.9_mm,44.2_mm},{127_mm,76_mm,12.7_mm}},
{{1850_mm^2,3.06E6_mm^4,0.837E6_mm^4,-1450924.000_mm^4,17.7_mm,42.9_mm},{127_mm,76_mm,9.5_mm}},
{{1250_mm^2,2.12E6_mm^4,0.587E6_mm^4,-1009050.000_mm^4,16.5_mm,41.7_mm},{127_mm,76_mm,6.4_mm}},
{{2100_mm^2,2.09E6_mm^4,0.999E6_mm^4,-1000159.000_mm^4,20.9_mm,33.5_mm},{102_mm,76_mm,12.7_mm}},
{{1600_mm^2,1.64E6_mm^4,0.787E6_mm^4,-793596.000_mm^4,19.7_mm,32.3_mm},{102_mm,76_mm,9.5_mm}},
{{1090_mm^2,1.14E6_mm^4,0.554E6_mm^4,-560940.400_mm^4,18.4_mm,31_mm},{102_mm,76_mm,6.4_mm}},
{{1770_mm^2,1.35E6_mm^4,0.566E6_mm^4,-635417.500_mm^4,17.8_mm,30.5_mm},{89_mm,64_mm,12.7_mm}},
{{1360_mm^2,1.07E6_mm^4,0.454E6_mm^4,-510454.400_mm^4,16.6_mm,29.2_mm},{89_mm,64_mm,9.5_mm}},
{{929_mm^2,0.753E6_mm^4,0.323E6_mm^4,-363635.990_mm^4,15.4_mm,27.9_mm},{89_mm,64_mm,6.4_mm}},
{{1450_mm^2,0.799E6_mm^4,0.278E6_mm^4,-369372.000_mm^4,14.7_mm,27.4_mm},{76_mm,51_mm,12.7_mm}},
{{1120_mm^2,0.641E6_mm^4,0.224E6_mm^4,-301863.200_mm^4,13.6_mm,26.2_mm},{76_mm,51_mm,9.5_mm}},
{{768_mm^2,0.454E6_mm^4,0.162E6_mm^4,-216753.920_mm^4,12.4_mm,24.9_mm},{76_mm,51_mm,6.4_mm}},
{{1000_mm^2,0.38E6_mm^4,0.214E6_mm^4,-184640.000_mm^4,14.7_mm,21_mm},{64_mm,51_mm,9.5_mm}},
{{684_mm^2,0.273E6_mm^4,0.155E6_mm^4,-135688.840_mm^4,13.5_mm,19.8_mm},{64_mm,51_mm,6.4_mm}},
{{13_in^2,80.9_in^4,38.8_in^4,-38.551_in^4,1.65_in,2.65_in},{8_in,6_in,1_in}},
{{9.94_in^2,63.5_in^4,30.8_in^4,-30.609_in^4,1.56_in,2.55_in},{8.000_in,6.000_in,0.750_in}},
{{6.75_in^2,44.4_in^4,21.7_in^4,-21.643_in^4,1.46_in,2.46_in},{8.000_in,6.000_in,0.500_in}},
{{6.94_in^2,24.5_in^4,8.63_in^4,-11.480_in^4,1.07_in,2.07_in},{6.000_in,4.000_in,0.750_in}},
{{4.75_in^2,17.3_in^4,6.22_in^4,-8.214_in^4,0.981_in,1.98_in},{6.000_in,4.000_in,0.500_in}},
{{3.61_in^2,13.4_in^4,4.86_in^4,-6.398_in^4,0.933_in,1.93_in},{6.000_in,4.000_in,0.375_in}},
{{3.75_in^2,9.43_in^4,2.55_in^4,-4.444_in^4,0.746_in,1.74_in},{5.000_in,3.000_in,0.500_in}},
{{2.86_in^2,7.35_in^4,2.01_in^4,-3.486_in^4,0.698_in,1.69_in},{5.000_in,4.000_in,0.375_in}},
{{1.94_in^2,5.09_in^4,1.41_in^4,-2.425_in^4,0.648_in,1.64_in},{5.000_in,4.000_in,0.250_in}},
{{3.25_in^2,5.02_in^4,2.4_in^4,-2.408_in^4,0.822_in,1.32_in},{4.000_in,4.000_in,0.500_in}},
{{2.48_in^2,3.94_in^4,1.89_in^4,-1.912_in^4,0.775_in,1.27_in},{4.000_in,4.000_in,0.375_in}},
{{1.69_in^2,2.75_in^4,1.33_in^4,-1.350_in^4,0.725_in,1.22_in},{4.000_in,4.000_in,0.250_in}},
{{2.75_in^2,3.24_in^4,1.36_in^4,-1.522_in^4,0.701_in,1.2_in},{3.500_in,2.500_in,0.500_in}},
{{2.11_in^2,2.56_in^4,1.09_in^4,-1.221_in^4,0.655_in,1.15_in},{3.500_in,2.500_in,0.375_in}},
{{1.44_in^2,1.81_in^4,0.775_in^4,-0.871_in^4,0.607_in,1.1_in},{3.500_in,2.500_in,0.250_in}},
{{2.25_in^2,1.92_in^4,0.667_in^4,-0.887_in^4,0.58_in,1.08_in},{3.000_in,2.000_in,0.500_in}},
{{1.73_in^2,1.54_in^4,0.539_in^4,-0.726_in^4,0.535_in,1.03_in},{3.000_in,2.000_in,0.375_in}},
{{1.19_in^2,1.09_in^4,0.39_in^4,-0.519_in^4,0.487_in,0.98_in},{3.000_in,2.000_in,0.250_in}},
{{1.55_in^2,0.914_in^4,0.513_in^4,-0.441_in^4,0.578_in,0.826_in},{2.500_in,2.000_in,0.375_in}},
{{1.06_in^2,0.656_in^4,0.372_in^4,-0.324_in^4,0.532_in,0.779_in},{2.500_in,2.000_in,0.250_in}}
};


SECHP_STRINGFROMID(ID)
BEGIN
	LOCAL spanish:={"Perfil W","Perfil S","Perfil C","Perfil L iguales","Perfil L desiguales","Guardar los Datos?","Adicionar (+)","Sustraer (-)","Datos del círculo","Centro x:","Centro y:","Radio:","Área:","Ingrese centro x","Ingrese centro y","Ingrese radio","Ingrese signo del área","Datos del sector circular","Ángulo inicial:","Ángulo final:","Ingrese ángulo inicial","Ingrese ángulo final","Datos del rectángulo","Valor x del punto inferior izquierdo","Valor y del punto inferior izquierdo","Valor x del punto superior derecho","Valor y del punto superior derecho","Datos del polígono","Puntos del poligono","Lista de Perfiles","Perfil:","Seleccione el tipo de perfil","Selección del perfil W","Ángulo de rotación:","Seleccione el perfil","Ingrese el ángulo de rotación del perfil","Posición en x del centroide del perfil","Posición en y del centroide del perfil","Selección del perfil S","Selección del perfil C","Selección del perfil L","ERROR: No hay datos o el área es negativa","Archivo a Abrir","Guardar Datos","Nombre:","Ingrese el nombre del archivo","Nombre de Archivo no valido","Archivo a Eliminar","Eliminar el archivo: ","Archivo:","Seleccione el archivo","No hay Figuras","Eliminar figura?","Configuración del Programa","Unidades:","Mostrar ejes:","Mostrar cuadrícula:","Mostrar centroide:","Mostrar ejes principales:","Seleccione la unidad de longitud","Mostrar los ejes de referencia x y?","Mostrar cuadricula?","Mostrar centroide?","Mostrar los ejes principales?"};
	LOCAL english:={"W Shapes","S Shapes","C Shapes","Angles Equal Legs","Angles Unequal Legs","Save Data?","Add (+)","Subtract (-)","Circle data","Center x:","Center y:","Radio:","Area:","Enter center x","Enter center y","Enter radio","Enter area sign","Circular sector data","Initial angle:","End angle:","Enter initial angle","Enter end angle","Rectangle data","X value of the lower left point","Y value of the lower left point","X value of the upper right point","Y value of the upper right point","Polygon data","Polygon points","List of shapes","Shape:","Select the type of shape","Selection of the W shape","Rotation angle:","Select the shape","Enter the angle of rotation of the shape","X position of the centroid of the shape","Y position of the centroid of the shape","Selection of the S shape","Selection of the C shape","Selection of the L shape","ERROR: No data or area is negative","File to Open","Save data","Name:","Enter the file name","Invalid File Name","File to Delete","Delete the file: ","File:","Select file","There are no shapes","Delete shape?","Program Settings","Units:","Show axes:","Show grid:","Show centroid:","Show main axes:","Select length unit","Show the x and y reference axes?","Show grid?","Show centroid?","Show the main axes?"};
	CASE
		IF Language==5 THEN
			RETURN spanish(ID);
		END;
		DEFAULT RETURN english(ID);
	END;
END;

// Programa de Inicio
START()
BEGIN
	STARTVIEW(-4,1);//Cuando Finaliza queda en el menu de aplicaciones
	SecHP();
END;

EXPORT VER()
BEGIN
	return 2.1;
END;

EXPORT PER(id_unidad)
BEGIN
	IF editarPerfil({{1,1},0,0,0}) THEN
		RETURN CAL({{id_unidad},{{},{},{},{},{procesarPerfil({input_perfil,input_designacion},input_angulo,input_pos_xc,input_pos_yc)}}});
	ELSE
		RETURN {};
	END;
END;

//Calcula la Sección para usar desde Home
EXPORT CAL(archivo)
BEGIN
LOCAL prop,tagProp;
tagProp:={};
datos:=archivo;
procesar();
prop:=calcular();
//{Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,IMax,IMin,θ};
IF TYPE(prop) == 6 THEN
	tagProp(0):={"A=",EXPR(prop(1)+lista_UnidadesArea(datos(1,1)))};
	tagProp(0):={"Xc=",EXPR(RE(prop(2))+lista_UnidadesLongitud(datos(1,1)))};
	tagProp(0):={"Yc=",EXPR(IM(prop(2))+lista_UnidadesLongitud(datos(1,1)))};
	tagProp(0):={"Ixxc=",EXPR(prop(3)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"Iyyc=",EXPR(prop(4)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"Ixyc=",EXPR(prop(5)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"Ixx=",EXPR(prop(6)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"Iyy=",EXPR(prop(7)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"Ixy=",EXPR(prop(8)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"IMax=",EXPR(prop(9)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"IMin=",EXPR(prop(10)+lista_UnidadesMomentoInercia(datos(1,1)))};
	tagProp(0):={"θ",prop(11)_deg};
	RETURN tagProp;
END;
RETURN prop(); 
END;

//Genera la FIG de la Viga para usar desde Home
EXPORT FIG(archivo)
BEGIN
	datos:=archivo;
	MinMax:={(MAXREAL,MAXREAL),(-MAXREAL,-MAXREAL)};
	DIMGROB_P(G7,320,219,RGB(255,255,255));
	procesar();
	calcular();
	actualizarMinMax();
	generarSeccion();
	BLIT_P(G7);
	FREEZE;
	WAIT(-1);
	STARTVIEW(1);
END;

EXPORT TAB(archivo)
BEGIN
	datos:=archivo;
	procesar();
	calcular();
	generarTabla();
END;


// Programa Principal
EXPORT SecHP()
BEGIN
	LOCAL dat;
	LOCAL eventoMouse,eventoKder,eventoKizq,eventoKmen,eventoKmas,eventoKarr,eventoKaba,eventoKesc;
	LOCAL softMenu;
	listaSigno:={SECHP_STRINGFROMID(7),SECHP_STRINGFROMID(8)};
	listaTiposPerfiles:={SECHP_STRINGFROMID(1),SECHP_STRINGFROMID(2),SECHP_STRINGFROMID(3),SECHP_STRINGFROMID(4),SECHP_STRINGFROMID(5)};
	salir:=0; // Variable por defecto
	datos:={{3},{{},{},{},{},{}}}; //{{indiceUnidadesL},{circulo,sector circular,rectangulo,poligono,propiedades}}
	MinMax:={(MAXREAL,MAXREAL),(-MAXREAL,-MAXREAL)};
	DIMGROB_P(G7,320,219,RGB(255,255,255));
	pantallaInicio();
	menuPrincipal(); //Dibuja el soft menu principal
	Xmin:=-1.6;Ymin:=-1.09;PixSize:=0.01;
	puntoMov:={Xmin,Ymin,PixSize};
	xmin:=Xmin;xmax:=xmin+PixSize*pH;ymin:=Ymin;ymax:=ymin+PixSize*pV;
	WHILE  NOT salir DO
		WAIT(−1);// espera por un evento en la pantalla o teclado
		datoMouse:=MOUSE();
		eventoMouse:=SIZE(datoMouse(1))>0; // evento en pantalla
		eventoKesc:=ISKEYDOWN(4); //evento tecla Esc
		eventoKizq:=ISKEYDOWN(7); //evento tecla <-
		eventoKder:=ISKEYDOWN(8); //evento tecla ->
		eventoKarr:=ISKEYDOWN(2); //evento tecla ↑
		eventoKaba:=ISKEYDOWN(12); //evento tecla ↓
		eventoKmen:=ISKEYDOWN(45); //evento tecla -
		eventoKmas:=ISKEYDOWN(50); //evento tecla +
		IF NOT eventoMouse THEN
			puntoMov:={Xmin,Ymin,PixSize};
		END;
		CASE // Casos para los eventos
			IF eventoMouse THEN // Inicio eventos del Mouse
				CASE // Casos para los eventos del Mouse
					IF menu == 0 THEN // Inicio eventos del Menu principal
						CASE // Casos para los eventos del Menu principal
							IF (softMenu:=eventoMenu()) THEN // Inicio eventos del softmenu
								CASE // Casos para el softmenu seleccionado
									IF softMenu==1 THEN
										abrirDatos();
										puntoMov:={Xmin,Ymin,PixSize};										
									END;
									IF softMenu==2 THEN
										nuevosDatos();		  
									END;
									IF softMenu==3 THEN
										eliminarDatos();		  
									END;
									IF softMenu==4 THEN
										acercaDe();		  
									END;
									IF softMenu==6 THEN
										salir:=-1;		  
									END;
								END; // Fin casos para el softmenu seleccionado
							END; // Fin eventos del softmenu
						END; // Fin casos para los eventos del Menu principal
					END;// Fin de eventos del Menu principal
					IF menu == 1 THEN // Inicio eventos del Menu secundario
						CASE // Casos para los eventos del Menu secundario
							IF (softMenu:=eventoMenu()) THEN // Inicio eventos del softmenu
								CASE // Casos para el softmenu seleccionado
									IF softMenu==1 THEN
										menuFiguras();
										actualizarMinMax();
										dibujarSeccion();
									END;
									IF softMenu==2 THEN
										guardarDatos();		  
									END;
									IF softMenu==3 THEN
										indiceEdicion:={1,0};
										//actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
										editarItems();
										menuEdicionItem();
										IF indiceEdicion(2)==3 THEN // No hay más datos
											indiceEdicion(2):=0;
											menuSecundario();
											dibujarSeccion();	
										END;	  
									END;
									IF softMenu==4 THEN
										IF ventanaMensaje ({SECHP_STRINGFROMID(6)},2) THEN
											guardarDatos();
										END;
										pantallaInicio();
										menuPrincipal();	
									END;
									IF softMenu==5 THEN
										mostrarCfg();
										menuSecundario();
										dibujarSeccion();											
									END;
									IF softMenu==6 THEN
										menuResultados();
										dibujarSeccion();			  
									END;
								END; // Fin casos para el softmenu seleccionado
							END; // Fin eventos del softmenu
							IF (SIZE(dat:=eventoArrastrar())) THEN // Inicio eventos de drag
									Xmin:=puntoMov(1);Ymin:=puntoMov(2);
									moverSeccion(dat);
									dibujarSeccion();
							END; // Fin eventos de drag
							IF (SIZE(dat:=eventoAlargar())) THEN // Inicio eventos de shrink
								Xmin:=puntoMov(1);Ymin:=puntoMov(2);PixSize:=puntoMov(3);
								modificarZoom(dat);
								dibujarSeccion();
							END; // Fin eventos de shrink
						END; // Fin casos para los eventos del Menu secundario
					END;// Fin de eventos del Menu secundario
					IF menu == 2 THEN // Inicio eventos del Menu Figuras
						CASE // Casos para los eventos del Menu Menu Figuras
							IF (softMenu:=eventoMenu()) THEN // Inicio eventos del softmenu
								CASE // Casos para el softmenu seleccionado
									IF softMenu==1 THEN
										agregarCirculo();
										menuFiguras();
										actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
										dibujarSeccion();
									END;
									IF softMenu==2 THEN
										agregarSectorCircular();
										menuFiguras();
										actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
										dibujarSeccion();
									END;
									IF softMenu==3 THEN
										agregarRectangulo();
										menuFiguras();
										actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
										dibujarSeccion();
									END;
									IF softMenu==4 THEN
										agregarPoligono;
										menuFiguras();
										actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
										dibujarSeccion();
									END;
									IF softMenu==5 THEN
										agregarPerfil();
										menuFiguras();
										actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
										dibujarSeccion();
									END;
									IF softMenu==6 THEN
										menuSecundario();
										dibujarSeccion();
									END;
								END; // Fin casos para el softmenu seleccionado
							END; // Fin eventos del softmenu
							IF (SIZE(dat:=eventoArrastrar())) THEN // Inicio eventos de drag
									Xmin:=puntoMov(1);Ymin:=puntoMov(2);
									moverSeccion(dat);
									dibujarSeccion();
							END; // Fin eventos de drag
							IF (SIZE(dat:=eventoAlargar())) THEN // Inicio eventos de shrink
								Xmin:=puntoMov(1);Ymin:=puntoMov(2);PixSize:=puntoMov(3);
								modificarZoom(dat);
								dibujarSeccion();
							END; // Fin eventos de shrink
						END; // Fin casos para los eventos del Menu Figuras
					END;// Fin de eventos del Menu Figuras
					IF menu == 3 THEN // Inicio eventos del Menu Edición items
						CASE // Casos para los eventos del Menu Edición	items
							IF (softMenu:=eventoMenu()) THEN // Inicio eventos del softmenu
								CASE// Casos para el softmenu seleccionado
									IF softMenu==1 THEN
										indiceEdicion(1):=MAX(indiceEdicion(1)-1,1);
										editarItems();
									END;
									IF softMenu==2 THEN
										indiceEdicion(1):=indiceEdicion(1)+1;
										editarItems();
									END;
									IF softMenu==3 THEN
										indiceEdicion(2):=1;
										editarItems();
									END;
									IF softMenu==4 THEN
										indiceEdicion(2):=2;
										editarItems();
										IF indiceEdicion(2)==3 THEN // No hay más datos
											indiceEdicion(2):=0;
											menuSecundario();
											dibujarSeccion();	
										END;
									END;
									IF softMenu==5 THEN
										indiceEdicion(2):=3; // información de la Figura
										editarItems();
									END;
									IF softMenu==6 THEN
										menuSecundario();
										dibujarSeccion();										
									END;
								END;// Fin casos para el softmenu seleccionado
							END;// Fin eventos del softmenu
						END;// Fin casos para los eventos del  Menu Edición	items
					END;// Fin de eventos del  Menu Edición items
					IF menu == 4 THEN // Inicio eventos de Resultados
						CASE // Casos para los eventos de de Resultados
							IF (softMenu:=eventoMenu()) THEN // Inicio eventos del softmenu
								CASE// Casos para el softmenu seleccionado
									IF softMenu==1 THEN
										propiedades:=generarTabla();
										IF TYPE(propiedades)== 2 THEN
											ventanaMensaje({propiedades},1);
										END;
										menuResultados();
										dibujarSeccion();
									END;
									IF softMenu==2 THEN
										propiedades:=calcular();
										CASE
											IF TYPE(propiedades) ==2 THEN
												ventanaMensaje({propiedades},1);
											END;
											DEFAULT ventanaMensaje({"A="+propiedades(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(propiedades(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(propiedades(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+propiedades(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+propiedades(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+propiedades(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+propiedades(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+propiedades(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+propiedades(8)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Imax="+propiedades(9)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Imin="+propiedades(10)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"θ="+propiedades(11)+"_deg"},0);
										END;										
										menuResultados();
										dibujarSeccion();
									END;
									IF softMenu==6 THEN
										menuSecundario();
										dibujarSeccion();										
									END;
								END;// Fin casos para el softmenu seleccionado
							END;// Fin eventos del softmenu
							IF (SIZE(dat:=eventoArrastrar())) THEN // Inicio eventos de drag
									Xmin:=puntoMov(1);Ymin:=puntoMov(2);
									moverSeccion(dat);
									dibujarSeccion();
							END; // Fin eventos de drag
							IF (SIZE(dat:=eventoAlargar())) THEN // Inicio eventos de shrink
								Xmin:=puntoMov(1);Ymin:=puntoMov(2);PixSize:=puntoMov(3);
								modificarZoom(dat);
								dibujarSeccion();
							END; // Fin eventos de shrink
						END;// Fin casos para los eventos del  Menu de Resultados
					END;// Fin de eventos del  Menu de Resultados
					DEFAULT salir:=-1; // Nunca debería ejecutarse
				END; // Fin casos de eventos del Mouse
			END; // Fin eventos Mouse
			//Eventos Teclado
			IF eventoKmas THEN 
				CASE
					IF menu==1 OR menu==2 OR menu==4 THEN
						modificarZoom({160,110,1.2});
						dibujarSeccion();
						puntoMov:={Xmin,Ymin,PixSize};
					END;
				END;
			END;
			IF eventoKmen THEN 
				CASE
					IF menu==1 OR menu==2 OR menu==4 THEN
						modificarZoom({160,110,0.8});
						dibujarSeccion();
						puntoMov:={Xmin,Ymin,PixSize};
					END;
				END;
			END;
			IF eventoKizq THEN 
				CASE
					IF menu==1 OR menu==2 OR menu==4 THEN
						Xmin:=puntoMov(1);Ymin:=puntoMov(2);
						WAIT(0.1);
						WHILE ISKEYDOWN(7) DO
							WAIT(0.01);
							moverSeccion({-10,0});
							dibujarSeccion();
							puntoMov:={Xmin,Ymin,PixSize};
						END;						
					END;
				END;
			END;
			IF eventoKder THEN 
				CASE
					IF menu==1 OR menu==2 OR menu==4 THEN
						Xmin:=puntoMov(1);Ymin:=puntoMov(2);
						WAIT(0.1);
						WHILE ISKEYDOWN(8) DO
							WAIT(0.01);
							moverSeccion({10,0});
							dibujarSeccion();
							puntoMov:={Xmin,Ymin,PixSize};
						END;
					END;
				END;
			END;
			IF eventoKarr THEN 
				CASE
					IF menu==1 OR menu==2 OR menu==4 THEN
						Xmin:=puntoMov(1);Ymin:=puntoMov(2);
						WAIT(0.1);
						WHILE ISKEYDOWN(2) DO
							WAIT(0.01);
							moverSeccion({0,-10});
							dibujarSeccion();
							puntoMov:={Xmin,Ymin,PixSize};
						END;
					END;
				END;
			END;
			IF eventoKaba THEN 
				CASE
					IF menu==1 OR menu==2 OR menu==4 THEN
						Xmin:=puntoMov(1);Ymin:=puntoMov(2);
						WAIT(0.1);
						WHILE ISKEYDOWN(12) DO
							WAIT(0.01);
							moverSeccion({0,10});
							dibujarSeccion();
							puntoMov:={Xmin,Ymin,PixSize};
						END;
					END;
				END;
			END;
			IF eventoKesc THEN 
				CASE
					IF menu==1 OR menu==2 OR menu==4 THEN
						actualizarMinMax();
						dibujarSeccion();
						puntoMov:={Xmin,Ymin,PixSize};
					END;
				END;
			END;
		END; // Fin de caso de Eventos	
	END;	
END;

agregarCirculo()
BEGIN
	IF editarCirculo({0,0,1,1}) THEN
	 datos(2,1,0):=procesarCirculo((input_centro_x,input_centro_y),input_radio,input_signo);
	END;
END;

editarCirculo(datoActual)
BEGIN
RETURN INPUT({{input_centro_x,[0],{30,50,2}},{input_centro_y,[0],{30,50,3}},{input_radio,[0],{30,50,4}},{input_signo,listaSigno,{68,32,0}}},SECHP_STRINGFROMID(9), {SECHP_STRINGFROMID(10),SECHP_STRINGFROMID(11),SECHP_STRINGFROMID(12),SECHP_STRINGFROMID(13)}, {SECHP_STRINGFROMID(14),SECHP_STRINGFROMID(15),SECHP_STRINGFROMID(16),SECHP_STRINGFROMID(17)}, {{}}, datoActual);
END;

procesarCirculo(centro,radio,signo)
BEGIN
	LOCAL Area,Centroide,Ixxc,Iyyc,Ixyc,MinMax;
	LOCAL Ixx,Iyy,Ixy,prop;
	Area:=pi*radio^2;
	Centroide:=centro;
	Ixxc:=Area*(radio^2)/4;
	Iyyc:=Ixxc;
	Ixyc:=0;
	Ixx:=Ixxc+Area*IM(Centroide)^2;
	Iyy:=Iyyc+Area*RE(Centroide)^2;
	Ixy:=Ixyc+Area*RE(Centroide)*IM(Centroide);
	MinMax:={centro-(radio,radio),centro+(radio,radio)};
	prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};	
	RETURN {{centro,radio},prop,signo};
END;

agregarSectorCircular()
BEGIN
	IF editarSectorCircular({0,0,1,0,15,1}) THEN
		datos(2,2,0):=procesarSectorCircular((input_centro_x,input_centro_y),input_radio,input_θinicial,input_θfinal,input_signo);
	END;
END;

editarSectorCircular(datoActual)
BEGIN
	RETURN INPUT({{input_centro_x,[0],{30,50,1}},{input_centro_y,[0],{30,50,2}},{input_radio,[0],{30,50,3}},{input_θinicial,[0],{30,50,4}},{input_θfinal,[0],{30,50,5}},{input_signo,listaSigno,{68,32,0}}},SECHP_STRINGFROMID(18), {SECHP_STRINGFROMID(10),SECHP_STRINGFROMID(11),SECHP_STRINGFROMID(12),SECHP_STRINGFROMID(19),SECHP_STRINGFROMID(20),SECHP_STRINGFROMID(13)}, {SECHP_STRINGFROMID(14),SECHP_STRINGFROMID(15),SECHP_STRINGFROMID(16),SECHP_STRINGFROMID(21),SECHP_STRINGFROMID(22),SECHP_STRINGFROMID(17)}, {{}}, datoActual);
END;

procesarSectorCircular(centro,radio,θi,θf,signo)
BEGIN
	LOCAL Area,Centroide,Ixxc,Iyyc,Ixyc,MinMax;
	LOCAL Ixx,Iyy,Ixy,prop;
	LOCAL α,β,rCentro;
	LOCAL rotacion,θinicial,θfinal;
	θinicial:=θi;
	θfinal:=θf;
	θfinal:=θfinal MOD 360;
	θinicial:=θinicial MOD 360;
	IF θfinal==0 THEN θfinal:=360; END;
	IF (θinicial>θfinal) THEN
		α:=0.5*(θfinal-(θinicial-360));
		β:=0.5*(θfinal+(θinicial-360));
	ELSE	
		α:=0.5*(θfinal-θinicial);
		β:=0.5*(θfinal+θinicial);
	END;
	
	rCentro:=2*radio*sin(α)/3/α*(180/pi);
	Centroide:=centro+(rCentro*cos(β),rCentro*sin(β));
	Area:=α*(pi/180)*radio^2;
	Ixxc:=0.25*(radio^4)*(α*(pi/180)-0.5*sin(2*α));
	Iyyc:=0.25*(radio^4)*(α*(pi/180)+0.5*sin(2*α))-Area*rCentro^2;
	Ixyc:=0;
	rotacion:=rotarMomentos(Ixxc,Iyyc,Ixyc,-β);
	Ixxc:=rotacion(1);
	Iyyc:=rotacion(2);
	Ixyc:=rotacion(3);
	Ixx:=Ixxc+Area*IM(Centroide)^2;
	Iyy:=Iyyc+Area*RE(Centroide)^2;
	Ixy:=Ixyc+Area*RE(Centroide)*IM(Centroide);
	MinMax:={(MIN(RE(centro),RE(centro)+radio*cos(θinicial),RE(centro)+radio*cos(θfinal)),MIN(IM(centro),IM(centro)+radio*sin(θinicial),IM(centro)+radio*sin(θfinal))),(MAX(RE(centro),RE(centro)+radio*cos(θinicial),RE(centro)+radio*cos(θfinal)),MAX(IM(centro),IM(centro)+radio*sin(θinicial),IM(centro)+radio*sin(θfinal)))};

	IF (θinicial>θfinal) THEN
		MinMax:={MinMax(1),(RE(centro)+radio,IM(MinMax(2)))};
		IF θinicial<270 THEN
			MinMax:={(RE(MinMax(1)),IM(centro)-radio),MinMax(2)};
		END;
		IF θinicial<180 THEN
			MinMax:={(RE(centro)-radio,IM(MinMax(1))),MinMax(2)};
		END;
		IF θinicial<90 THEN
			MinMax:={MinMax(1),(RE(MinMax(2)),IM(centro)+radio)};
		END;
	END;
	IF (θinicial<90) AND (θfinal>90) THEN
		MinMax:={MinMax(1),(RE(MinMax(2)),IM(centro)+radio)};
	END;
	IF (θinicial<180) AND (θfinal>180) THEN
		MinMax:={(RE(centro)-radio,IM(MinMax(1))),MinMax(2)};
	END;
	IF (θinicial<270) AND (θfinal>270) THEN
		MinMax:={(RE(MinMax(1)),IM(centro)-radio),MinMax(2)};
	END;	
	prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};	
	RETURN {{centro,radio,θi,θf},prop,signo};
END;

agregarRectangulo()
BEGIN
	IF editarRectangulo({0,0,1,1,1}) THEN
	 datos(2,3,0):=procesarRectangulo((input_p1_x,input_p1_y),(input_p2_x,input_p2_y),input_signo);
	END;
END;

editarRectangulo(datoActual)
BEGIN
RETURN INPUT({{input_p1_x,[0],{30,50,1}},{input_p1_y,[0],{30,50,2}},{input_p2_x,[0],{30,50,3}},{input_p2_y,[0],{30,50,4}},{input_signo,listaSigno,{68,32,0}}},SECHP_STRINGFROMID(23), {"X1:","Y1:","X2:","Y2:",SECHP_STRINGFROMID(13)},{SECHP_STRINGFROMID(24),SECHP_STRINGFROMID(25),SECHP_STRINGFROMID(26),SECHP_STRINGFROMID(27),SECHP_STRINGFROMID(17)}, {{}}, datoActual);
END;

procesarRectangulo(puntoII,puntoSD,signo)
BEGIN
	LOCAL Area,Centroide,Ixxc,Iyyc,Ixyc,MinMax;
	LOCAL Ixx,Iyy,Ixy,prop;
	Area:=ABS(RE(puntoSD-puntoII)*IM(puntoSD-puntoII));
	Centroide:=(puntoII+puntoSD)/2;
	Ixxc:=ABS((RE(puntoSD-puntoII)*IM(puntoSD-puntoII)^3)/12);
	Iyyc:=ABS((IM(puntoSD-puntoII)*RE(puntoSD-puntoII)^3)/12);
	Ixyc:=0;
	Ixx:=Ixxc+Area*IM(Centroide)^2;
	Iyy:=Iyyc+Area*RE(Centroide)^2;
	Ixy:=Ixyc+Area*RE(Centroide)*IM(Centroide);
	MinMax:={puntoII,puntoSD};
	prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};	
	RETURN {{puntoII,puntoSD},prop,signo};
END;

agregarPoligono()
BEGIN
	IF editarPoligono({[[0,0],[0,0],[0,0]],1}) THEN
		IF input_puntos <> [[0,0],[0,0],[0,0]] THEN
			datos(2,4,0):=procesarPoligono(input_puntos,input_signo);
		END;
	END;
END;

editarPoligono(datoActual)
BEGIN
LOCAL nDatos; 
	IF NOT INPUT({{input_signo,listaSigno,{38,32,3}}},SECHP_STRINGFROMID(28),SECHP_STRINGFROMID(13),SECHP_STRINGFROMID(17),{},{datoActual(2)}) THEN
		RETURN 0;
	END;
	input_puntos:=datoActual(1);
	input_puntos:=EDITMAT(input_puntos,{SECHP_STRINGFROMID(29),{},{"X","Y",""}});
	nDatos:=SIZE(input_puntos);
	IF nDatos(1)>2 AND nDatos(2)==2 THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END
END;

procesarPoligono(puntos,signo)
BEGIN
	LOCAL x1,y1,x2,y2,k,tArea,prop;
	LOCAL Area:=0;
	LOCAL Ixx:=0;
	LOCAL Iyy:=0;
	LOCAL Ixy:=0;
	LOCAL Ixxc:=0;
	LOCAL Iyyc:=0;
	LOCAL Ixyc:=0;
	LOCAL Centroide:=(0,0);
	LOCAL MinMax:={(MAXREAL,MAXREAL),(-MAXREAL,-MAXREAL)};
	LOCAL nDatos:=SIZE(puntos);
	FOR k FROM 1 TO  nDatos(1)-1 DO
		x1:=puntos(k,1);
		y1:=puntos(k,2);
		x2:=puntos(k+1,1);
		y2:=puntos(k+1,2);
		tArea:=0.5*(y1*x2-y2*x1);
		Area:=Area+tArea;
		Centroide:=Centroide+((x1+x2)*tArea/3,(y1+y2)*tArea/3);
		Ixx:=Ixx+(y2^2+(y1*y2)+y1^2)*tArea/6;
		Iyy:=Iyy+(x2^2+(x1*x2)+x1^2)*tArea/6;
		Ixy:=Ixy+((x2*y1)+(y2*x1)+2*(y1*x1)+2*(y2*x2))*tArea/12;
		MinMax:={(MIN(RE(MinMax(1)),x1),MIN(IM(MinMax(1)),y1)),(MAX(RE(MinMax(2)),x1),MAX(IM(MinMax(2)),y1))};
	END;
	x1:=puntos(nDatos(1),1);
	y1:=puntos(nDatos(1),2);
	x2:=puntos(1,1);
	y2:=puntos(1,2);
	tArea:=0.5*(y1*x2-y2*x1);
	Area:=Area+tArea;
	Centroide:=Centroide+((x1+x2)*tArea/3,(y1+y2)*tArea/3);
	Ixx:=Ixx+(y2^2+(y1*y2)+y1^2)*tArea/6;
	Iyy:=Iyy+(x2^2+(x1*x2)+x1^2)*tArea/6;
	Ixy:=Ixy+((x2*y1)+(y2*x1)+2*(y1*x1)+2*(y2*x2))*tArea/12;
	MinMax:={(MIN(RE(MinMax(1)),x1),MIN(IM(MinMax(1)),y1)),(MAX(RE(MinMax(2)),x1),MAX(IM(MinMax(2)),y1))};
	Centroide:=Centroide/Area;
	Ixxc:=Ixx-Area*IM(Centroide)^2;
	Iyyc:=Iyy-Area*RE(Centroide)^2;
	Ixyc:=Ixy-Area*RE(Centroide)*IM(Centroide);
	IF Area< 0 THEN
		Area:=Area*-1;
		Ixx:=Ixx*-1;
		Iyy:=Iyy*-1;
		Ixy:=Ixy*-1;
		Ixxc:=Ixxc*-1;
		Iyyc:=Iyyc*-1;
		Ixyc:=Ixyc*-1;
	END;
	prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};	
	RETURN {{puntos},prop,signo};						
END;

agregarPerfil()
BEGIN
	IF editarPerfil({{1,1},0,0,0}) THEN
	 datos(2,5,0):=procesarPerfil({input_perfil,input_designacion},input_angulo,input_pos_xc,input_pos_yc);
	END;
END;

editarPerfil(datoActual)
BEGIN
	IF NOT INPUT({{input_perfil,listaTiposPerfiles,{30,50,3}}},SECHP_STRINGFROMID(30),SECHP_STRINGFROMID(31),SECHP_STRINGFROMID(32),{},{datoActual(1,1)}) THEN
		RETURN 0;
	END;
	CASE
		IF input_perfil==1 THEN // Perfiles W
			RETURN INPUT({{input_designacion,listaPerfilesW,{30,60,2}},{input_angulo,[0],{50,40,3}},{input_pos_xc,[0],{50,40,4}},{input_pos_yc,[0],{50,40,5}}},SECHP_STRINGFROMID(33),{SECHP_STRINGFROMID(31),SECHP_STRINGFROMID(34),"Xc:","Yc:"},{SECHP_STRINGFROMID(35),SECHP_STRINGFROMID(36),SECHP_STRINGFROMID(37),SECHP_STRINGFROMID(38)},{},{datoActual(1,2),datoActual(2),datoActual(3),datoActual(4)});
		END;
		IF input_perfil==2 THEN // Perfiles S
			RETURN INPUT({{input_designacion,listaPerfilesS,{30,60,2}},{input_angulo,[0],{50,40,3}},{input_pos_xc,[0],{50,40,4}},{input_pos_yc,[0],{50,40,5}}},SECHP_STRINGFROMID(39),{SECHP_STRINGFROMID(31),SECHP_STRINGFROMID(34),"Xc:","Yc:"},{SECHP_STRINGFROMID(35),SECHP_STRINGFROMID(36),SECHP_STRINGFROMID(37),SECHP_STRINGFROMID(38)},{},{datoActual(1,2),datoActual(2),datoActual(3),datoActual(4)});
		END;
		IF input_perfil==3 THEN // Perfiles C
			RETURN INPUT({{input_designacion,listaPerfilesC,{30,60,2}},{input_angulo,[0],{50,40,3}},{input_pos_xc,[0],{50,40,4}},{input_pos_yc,[0],{50,40,5}}},SECHP_STRINGFROMID(40),{SECHP_STRINGFROMID(31),SECHP_STRINGFROMID(34),"Xc:","Yc:"},{SECHP_STRINGFROMID(35),SECHP_STRINGFROMID(36),SECHP_STRINGFROMID(37),SECHP_STRINGFROMID(38)},{},{datoActual(1,2),datoActual(2),datoActual(3),datoActual(4)});
		END;
		IF input_perfil==4 THEN // Perfiles Ángulos lados iguales
			RETURN INPUT({{input_designacion,listaPerfilesLigual,{30,60,2}},{input_angulo,[0],{50,40,3}},{input_pos_xc,[0],{50,40,4}},{input_pos_yc,[0],{50,40,5}}},SECHP_STRINGFROMID(41),{SECHP_STRINGFROMID(31),SECHP_STRINGFROMID(34),"Xc:","Yc:"},{SECHP_STRINGFROMID(35),SECHP_STRINGFROMID(36),SECHP_STRINGFROMID(37),SECHP_STRINGFROMID(38)},{},{datoActual(1,2),datoActual(2),datoActual(3),datoActual(4)});
		END;
		IF input_perfil==5 THEN // Perfiles Ángulos lados desiguales
			RETURN INPUT({{input_designacion,listaPerfilesLdesigual,{30,60,2}},{input_angulo,[0],{50,40,3}},{input_pos_xc,[0],{50,40,4}},{input_pos_yc,[0],{50,40,5}}},SECHP_STRINGFROMID(41),{SECHP_STRINGFROMID(31),SECHP_STRINGFROMID(34),"Xc:","Yc:"},{SECHP_STRINGFROMID(35),SECHP_STRINGFROMID(36),SECHP_STRINGFROMID(37),SECHP_STRINGFROMID(38)},{},{datoActual(1,2),datoActual(2),datoActual(3),datoActual(4)});
		END;
	END;
END;

procesarPerfil(idPerfil,angulo,xc,yc)
BEGIN
	LOCAL Area,Centroide,Ixxc,Iyyc,Ixyc,nDatos;
	LOCAL Ixx,Iyy,Ixy,prop,puntos,rotacion;
	LOCAL d,bf,tf,tw;
	LOCAL k,x1,y1,x2,y2;
	LOCAL MinMax:={(MAXREAL,MAXREAL),(-MAXREAL,-MAXREAL)};
	LOCAL matrizRotacion;
	LOCAL figXc,figYc;
	matrizRotacion:=[[COS(-angulo),-SIN(-angulo)],[SIN(-angulo),COS(-angulo)]];	
	CASE
		IF idPerfil(1)==1 THEN // Perfiles W
			Area:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),1,1),EXPR(0+lista_UnidadesArea(datos(1,1)))));
			Centroide:=(xc,yc);
			Ixxc:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),1,2),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Iyyc:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),1,3),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Ixyc:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),1,4),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			rotacion:=rotarMomentos(Ixxc,Iyyc,Ixyc,-angulo);
			Ixxc:=rotacion(1);
			Iyyc:=rotacion(2);
			Ixyc:=rotacion(3);
			Ixx:=Ixxc+Area*yc^2;
			Iyy:=Iyyc+Area*xc^2;
			Ixy:=Ixyc+Area*xc*yc;
			d:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			bf:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tf:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tw:=UVAL(CONVERT(datosPerfilesW(idPerfil(2),2,4),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			puntos:=[[-0.5*bf,-0.5*d],[0.5*bf,-0.5*d],[0.5*bf,-0.5*d+tf],[0.5*tw+0.08*bf,-0.5*d+tf],[0.5*tw+0.06*bf,-0.5*d+tf+0.003*bf],[0.5*tw+0.04*bf,-0.5*d+tf+0.011*bf],[0.5*tw+0.02*bf,-0.5*d+tf+0.027*bf],[0.5*tw,-0.5*d+tf+0.08*bf],[0.5*tw,0.5*d-tf-0.08*bf],[0.5*tw+0.003*bf,0.5*d-tf-0.06*bf],[0.5*tw+0.011*bf,0.5*d-tf-0.04*bf],[0.5*tw+0.027*bf,0.5*d-tf-0.02*bf],[0.5*tw+0.08*bf,0.5*d-tf],[0.5*bf,0.5*d-tf],[0.5*bf,0.5*d],[-0.5*bf,0.5*d],[-0.5*bf,0.5*d-tf],[-0.5*tw-0.08*bf,0.5*d-tf],[-0.5*tw-0.06*bf,0.5*d-tf-0.003*bf],[-0.5*tw-0.04*bf,0.5*d-tf-0.011*bf],[-0.5*tw-0.02*bf,0.5*d-tf-0.027*bf],[-0.5*tw,0.5*d-tf-0.08*bf],[-0.5*tw,-0.5*d+tf+0.08*bf],[-0.5*tw-0.003*bf,-0.5*d+tf+0.06*bf],[-0.5*tw-0.011*bf,-0.5*d+tf+0.04*bf],[-0.5*tw-0.027*bf,-0.5*d+tf+0.02*bf],[-0.5*tw-0.08*bf,-0.5*d+tf],[-0.5*bf,-0.5*d+tf]];
			puntos:=puntos*matrizRotacion;
			nDatos:=SIZE(puntos);
			FOR k FROM 1 TO  nDatos(1) DO
				puntos(k,1):=puntos(k,1)+xc;x1:=puntos(k,1);
				puntos(k,2):=puntos(k,2)+yc;y1:=puntos(k,2);
				MinMax:={(MIN(RE(MinMax(1)),x1),MIN(IM(MinMax(1)),y1)),(MAX(RE(MinMax(2)),x1),MAX(IM(MinMax(2)),y1))};
			END;
			prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};
			RETURN {{idPerfil,angulo,xc,yc},prop,{puntos}};
		END;
		IF idPerfil(1)==2 THEN // Perfiles S
			Area:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),1,1),EXPR(0+lista_UnidadesArea(datos(1,1)))));
			Centroide:=(xc,yc);
			Ixxc:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),1,2),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Iyyc:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),1,3),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Ixyc:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),1,4),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			rotacion:=rotarMomentos(Ixxc,Iyyc,Ixyc,-angulo);
			Ixxc:=rotacion(1);
			Iyyc:=rotacion(2);
			Ixyc:=rotacion(3);
			Ixx:=Ixxc+Area*yc^2;
			Iyy:=Iyyc+Area*xc^2;
			Ixy:=Ixyc+Area*xc*yc;
			d:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			bf:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tf:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tw:=UVAL(CONVERT(datosPerfilesS(idPerfil(2),2,4),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			puntos:=[[-0.5*bf,-d/2],[0.5*bf,-d/2],[0.5*bf-0.2*tf,-0.5*d+0.6*tf],[0.5*bf-0.4*tf,-0.5*d+0.8*tf],[0.5*bf-0.6*tf,-0.5*d+0.917*tf],[0.5*tw+0.6*tf,-0.5*d+(1.583)*tf],[0.5*tw+0.4*tf,-0.5*d+(1.7)*tf],[0.5*tw+0.2*tf,-0.5*d+(1.9)*tf],[0.5*tw,-0.5*d+2.5*tf],[0.5*tw,0.5*d-2.5*tf],[0.5*tw+0.2*tf,0.5*d-(1.9)*tf],[0.5*tw+0.4*tf,0.5*d-(1.7)*tf],[0.5*tw+0.6*tf,0.5*d-(1.583)*tf],[0.5*bf-0.6*tf,0.5*d-0.917*tf],[0.5*bf-0.4*tf,0.5*d-0.8*tf],[0.5*bf-0.2*tf,0.5*d-0.6*tf],[0.5*bf,d/2],[-0.5*bf,d/2],[-0.5*bf+0.2*tf,0.5*d-0.6*tf],[-0.5*bf+0.4*tf,0.5*d-0.8*tf],[-0.5*bf+0.6*tf,0.5*d-0.917*tf],[-0.5*tw-0.6*tf,0.5*d-(1.583)*tf],[-0.5*tw-0.4*tf,0.5*d-(1.7)*tf],[-0.5*tw-0.2*tf,0.5*d-(1.9)*tf],[-0.5*tw,0.5*d-2.5*tf],[-0.5*tw,-0.5*d+2.5*tf],[-0.5*tw-0.2*tf,-0.5*d+(1.9)*tf],[-0.5*tw-0.4*tf,-0.5*d+(1.7)*tf],[-0.5*tw-0.6*tf,-0.5*d+(1.583)*tf],[-0.5*bf+0.6*tf,-0.5*d+0.917*tf],[-0.5*bf+0.4*tf,-0.5*d+0.8*tf],[-0.5*bf+0.2*tf,-0.5*d+0.6*tf]];
			puntos:=puntos*matrizRotacion;
			nDatos:=SIZE(puntos);
			FOR k FROM 1 TO  nDatos(1) DO
				puntos(k,1):=puntos(k,1)+xc;x1:=puntos(k,1);
				puntos(k,2):=puntos(k,2)+yc;y1:=puntos(k,2);
				MinMax:={(MIN(RE(MinMax(1)),x1),MIN(IM(MinMax(1)),y1)),(MAX(RE(MinMax(2)),x1),MAX(IM(MinMax(2)),y1))};
			END;
			prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};
			RETURN {{idPerfil,angulo,xc,yc},prop,{puntos}};
		END;
		IF idPerfil(1)==3 THEN // Perfiles C
			Area:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),1,1),EXPR(0+lista_UnidadesArea(datos(1,1)))));
			Centroide:=(xc,yc);
			Ixxc:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),1,2),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Iyyc:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),1,3),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Ixyc:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),1,4),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			figXc:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			rotacion:=rotarMomentos(Ixxc,Iyyc,Ixyc,-angulo);
			Ixxc:=rotacion(1);
			Iyyc:=rotacion(2);
			Ixyc:=rotacion(3);
			Ixx:=Ixxc+Area*yc^2;
			Iyy:=Iyyc+Area*xc^2;
			Ixy:=Ixyc+Area*xc*yc;
			d:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			bf:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tf:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tw:=UVAL(CONVERT(datosPerfilesC(idPerfil(2),2,4),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			puntos:=[[-figXc,-0.5*d],[-figXc+bf,-0.5*d],[-figXc+bf-0.2*tf,-0.5*d+0.6*tf],[-figXc+bf-0.4*tf,-0.5*d+0.8*tf],[-figXc+bf-0.6*tf,-0.5*d+0.917*tf],[-figXc+tw+0.6*tf,-0.5*d+(1.583)*tf],[-figXc+tw+0.4*tf,-0.5*d+(1.7)*tf],[-figXc+tw+0.2*tf,-0.5*d+(1.9)*tf],[-figXc+tw,-0.5*d+2.5*tf],[-figXc+tw,0.5*d-2.5*tf],[-figXc+tw+0.2*tf,0.5*d-(1.9)*tf],[-figXc+tw+0.4*tf,0.5*d-(1.7)*tf],[-figXc+tw+0.6*tf,0.5*d-(1.583)*tf],[-figXc+bf-0.6*tf,0.5*d-0.917*tf],[-figXc+bf-0.4*tf,0.5*d-0.8*tf],[-figXc+bf-0.2*tf,0.5*d-0.6*tf],[-figXc+bf,0.5*d],[-figXc,0.5*d]];
			puntos:=puntos*matrizRotacion;
			nDatos:=SIZE(puntos);
			FOR k FROM 1 TO  nDatos(1) DO
				puntos(k,1):=puntos(k,1)+xc;x1:=puntos(k,1);
				puntos(k,2):=puntos(k,2)+yc;y1:=puntos(k,2);
				MinMax:={(MIN(RE(MinMax(1)),x1),MIN(IM(MinMax(1)),y1)),(MAX(RE(MinMax(2)),x1),MAX(IM(MinMax(2)),y1))};
			END;
			prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};
			RETURN {{idPerfil,angulo,xc,yc},prop,{puntos}};
		END;
		IF idPerfil(1)==4 THEN // Perfiles Ángulos lados iguales
			Area:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),1,1),EXPR(0+lista_UnidadesArea(datos(1,1)))));
			Centroide:=(xc,yc);
			Ixxc:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),1,2),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Iyyc:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),1,3),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Ixyc:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),1,4),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			figXc:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			figYc:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			rotacion:=rotarMomentos(Ixxc,Iyyc,Ixyc,-angulo);
			Ixxc:=rotacion(1);
			Iyyc:=rotacion(2);
			Ixyc:=rotacion(3);
			Ixx:=Ixxc+Area*yc^2;
			Iyy:=Iyyc+Area*xc^2;
			Ixy:=Ixyc+Area*xc*yc;
			d:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			bf:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tf:=UVAL(CONVERT(datosPerfilesLigual(idPerfil(2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			puntos:=[[-figXc,-figYc],[-figXc+bf,-figYc],[-figXc+bf,-figYc+0.5*tf],[-figXc+bf-0.1*tf,-figYc+0.8*tf],[-figXc+bf-0.2*tf,-figYc+0.9*tf],[-figXc+bf-0.3*tf,-figYc+0.958*tf],[-figXc+bf-0.4*tf,-figYc+0.99*tf],[-figXc+bf-0.8*tf,-figYc+tf],[-figXc+2*tf,-figYc+tf],[-figXc+1.8*tf,-figYc+1.02*tf],[-figXc+1.6*tf,-figYc+1.083*tf],[-figXc+1.4*tf,-figYc+1.2*tf],[-figXc+1.2*tf,-figYc+1.4*tf],[-figXc+tf,-figYc+2*tf],[-figXc+tf,-figYc+d-0.5*tf],[-figXc+0.9*tf,-figYc+d-0.2*tf],[-figXc+0.8*tf,-figYc+d-0.1*tf],[-figXc+0.7*tf,-figYc+d-0.042*tf],[-figXc+0.6*tf,-figYc+d-0.01*tf],[-figXc+0.5*tf,-figYc+d],[-figXc,-figYc+d]];
			puntos:=puntos*matrizRotacion;
			nDatos:=SIZE(puntos);
			FOR k FROM 1 TO  nDatos(1) DO
				puntos(k,1):=puntos(k,1)+xc;x1:=puntos(k,1);
				puntos(k,2):=puntos(k,2)+yc;y1:=puntos(k,2);
				MinMax:={(MIN(RE(MinMax(1)),x1),MIN(IM(MinMax(1)),y1)),(MAX(RE(MinMax(2)),x1),MAX(IM(MinMax(2)),y1))};
			END;
			prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};
			RETURN {{idPerfil,angulo,xc,yc},prop,{puntos}};
		END;
		IF idPerfil(1)==5 THEN // Perfiles Ángulos lados desiguales
			Area:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),1,1),EXPR(0+lista_UnidadesArea(datos(1,1)))));
			Centroide:=(xc,yc);
			Ixxc:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),1,2),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Iyyc:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),1,3),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			Ixyc:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),1,4),EXPR(0+lista_UnidadesMomentoInercia(datos(1,1)))));
			figXc:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			figYc:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),1,6),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			rotacion:=rotarMomentos(Ixxc,Iyyc,Ixyc,-angulo);
			Ixxc:=rotacion(1);
			Iyyc:=rotacion(2);
			Ixyc:=rotacion(3);
			Ixx:=Ixxc+Area*yc^2;
			Iyy:=Iyyc+Area*xc^2;
			Ixy:=Ixyc+Area*xc*yc;
			d:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			bf:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			tf:=UVAL(CONVERT(datosPerfilesLdesigual(idPerfil(2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
			puntos:=[[-figXc,-figYc],[-figXc+bf,-figYc],[-figXc+bf,-figYc+0.5*tf],[-figXc+bf-0.1*tf,-figYc+0.8*tf],[-figXc+bf-0.2*tf,-figYc+0.9*tf],[-figXc+bf-0.3*tf,-figYc+0.958*tf],[-figXc+bf-0.4*tf,-figYc+0.99*tf],[-figXc+bf-0.8*tf,-figYc+tf],[-figXc+2*tf,-figYc+tf],[-figXc+1.8*tf,-figYc+1.02*tf],[-figXc+1.6*tf,-figYc+1.083*tf],[-figXc+1.4*tf,-figYc+1.2*tf],[-figXc+1.2*tf,-figYc+1.4*tf],[-figXc+tf,-figYc+2*tf],[-figXc+tf,-figYc+d-0.5*tf],[-figXc+0.9*tf,-figYc+d-0.2*tf],[-figXc+0.8*tf,-figYc+d-0.1*tf],[-figXc+0.7*tf,-figYc+d-0.042*tf],[-figXc+0.6*tf,-figYc+d-0.01*tf],[-figXc+0.5*tf,-figYc+d],[-figXc,-figYc+d]];
			puntos:=puntos*matrizRotacion;
			nDatos:=SIZE(puntos);
			FOR k FROM 1 TO  nDatos(1) DO
				puntos(k,1):=puntos(k,1)+xc;x1:=puntos(k,1);
				puntos(k,2):=puntos(k,2)+yc;y1:=puntos(k,2);
				MinMax:={(MIN(RE(MinMax(1)),x1),MIN(IM(MinMax(1)),y1)),(MAX(RE(MinMax(2)),x1),MAX(IM(MinMax(2)),y1))};
			END;
			prop:={Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,MinMax};
			RETURN {{idPerfil,angulo,xc,yc},prop,{puntos}};
		END;
	END;
END;

procesar() // Procesa todas las entradas realizadas
BEGIN
LOCAL k,lista;
	lista:=datos(2,1); // Circulos
	FOR k FROM 1 TO  SIZE(lista) DO
		datos(2,1,k):=procesarCirculo(lista(k,1,1),lista(k,1,2),lista(k,3));
	END;
	lista:=datos(2,2); // Sector circular
	FOR k FROM 1 TO  SIZE(lista) DO
		datos(2,2,k):=procesarSectorCircular(lista(k,1,1),lista(k,1,2),lista(k,1,3),lista(k,1,4),lista(k,3));
	END;
	lista:=datos(2,3); // Rectangulo
	FOR k FROM 1 TO  SIZE(lista) DO
		datos(2,3,k):=procesarRectangulo(lista(k,1,1),lista(k,1,2),lista(k,3));
	END;
	lista:=datos(2,4); // Poligono
	FOR k FROM 1 TO  SIZE(lista) DO
		datos(2,4,k):=procesarPoligono(lista(k,1,1),lista(k,3));
	END;
	lista:=datos(2,5); // Perfil
	FOR k FROM 1 TO  SIZE(lista) DO
		datos(2,5,k):=procesarPerfil(lista(k,1,1),lista(k,1,2),lista(k,1,3),lista(k,1,4));
	END;
END;

generarTabla() // Genera tabla de cálculos
BEGIN
LOCAL i,k,lista,tabla,nombreColumnas,nombreFilas,prop;
	prop:=calcular();
	IF TYPE(prop)== 2 THEN
		RETURN prop;
	END;
	nombreColumnas:={"A","xc","yc","A·xc","A·yc","Ixxc","Iyyc","Ixyc","Ixx","Iyy","Ixy","Δx=(XC-xc)","Δy=(YC-yc)","A·Δx²","A·Δy²","A·Δx·Δy","IXXC","IYYC","IXYC",""};
	nombreFilas:={};
	i=0;
	tabla:=[[0]];
	lista:=datos(2,1); // Circulos
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),lista(k,2,1)*RE(lista(k,2,2)),lista(k,2,1)*IM(lista(k,2,2)),lista(k,2,3),lista(k,2,4),lista(k,2,5),lista(k,2,6),lista(k,2,7),lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),lista(k,2,3)+lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,4)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,5)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	lista:=datos(2,2); // Sector circular
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),lista(k,2,1)*RE(lista(k,2,2)),lista(k,2,1)*IM(lista(k,2,2)),lista(k,2,3),lista(k,2,4),lista(k,2,5),lista(k,2,6),lista(k,2,7),lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),lista(k,2,3)+lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,4)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,5)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	lista:=datos(2,3); // Rectangulo
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),lista(k,2,1)*RE(lista(k,2,2)),lista(k,2,1)*IM(lista(k,2,2)),lista(k,2,3),lista(k,2,4),lista(k,2,5),lista(k,2,6),lista(k,2,7),lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),lista(k,2,3)+lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,4)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,5)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	lista:=datos(2,4); // Poligono
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),lista(k,2,1)*RE(lista(k,2,2)),lista(k,2,1)*IM(lista(k,2,2)),lista(k,2,3),lista(k,2,4),lista(k,2,5),lista(k,2,6),lista(k,2,7),lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),lista(k,2,3)+lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,4)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,5)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	lista:=datos(2,5); // Perfil
	FOR k FROM 1 TO  SIZE(lista) DO
		i:=i+1;
		nombreFilas(0):="S"+i;
		tabla(i):=[lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),lista(k,2,1)*RE(lista(k,2,2)),lista(k,2,1)*IM(lista(k,2,2)),lista(k,2,3),lista(k,2,4),lista(k,2,5),lista(k,2,6),lista(k,2,7),lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),lista(k,2,3)+lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,lista(k,2,4)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,lista(k,2,5)+lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
	END;
	// Áreas Negativas
	lista:=datos(2,1); // Circulos
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas Negativas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[-lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),-lista(k,2,1)*RE(lista(k,2,2)),-lista(k,2,1)*IM(lista(k,2,2)),-lista(k,2,3),-lista(k,2,4),-lista(k,2,5),-lista(k,2,6),-lista(k,2,7),-lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),-lista(k,2,3)-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,4)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,5)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	lista:=datos(2,2); // Sector circular
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas Negativas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[-lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),-lista(k,2,1)*RE(lista(k,2,2)),-lista(k,2,1)*IM(lista(k,2,2)),-lista(k,2,3),-lista(k,2,4),-lista(k,2,5),-lista(k,2,6),-lista(k,2,7),-lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),-lista(k,2,3)-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,4)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,5)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	lista:=datos(2,3); // Rectangulo
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas Negativas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[-lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),-lista(k,2,1)*RE(lista(k,2,2)),-lista(k,2,1)*IM(lista(k,2,2)),-lista(k,2,3),-lista(k,2,4),-lista(k,2,5),-lista(k,2,6),-lista(k,2,7),-lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),-lista(k,2,3)-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,4)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,5)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	lista:=datos(2,4); // Poligono
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas Negativas
			i:=i+1;
			nombreFilas(0):="S"+i;
			tabla(i):=[-lista(k,2,1),RE(lista(k,2,2)),IM(lista(k,2,2)),-lista(k,2,1)*RE(lista(k,2,2)),-lista(k,2,1)*IM(lista(k,2,2)),-lista(k,2,3),-lista(k,2,4),-lista(k,2,5),-lista(k,2,6),-lista(k,2,7),-lista(k,2,8),RE(prop(2))-RE(lista(k,2,2)),IM(prop(2))-IM(lista(k,2,2)),-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2))),-lista(k,2,3)-lista(k,2,1)*(IM(prop(2))-IM(lista(k,2,2)))^2,-lista(k,2,4)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))^2,-lista(k,2,5)-lista(k,2,1)*(RE(prop(2))-RE(lista(k,2,2)))*(IM(prop(2))-IM(lista(k,2,2)))];
		END;
	END;
	nombreFilas(0):="∑";
	tabla(i+1):=[prop(1),0,0,prop(1)*RE(prop(2)),prop(1)*IM(prop(2)),0,0,0,prop(6),prop(7),prop(8),0,0,0,0,0,prop(3),prop(4),prop(5)];
	nombreFilas(0):="";
	RETURN EDITMAT(tabla,{"CM=("+RE(prop(2))+","+IM(prop(2))+")",nombreFilas,nombreColumnas});
END;

rotarMomentos(Ixxc,Iyyc,Ixyc,θ) // Al ángulo de rotación θ es del eje, no de la figura.
BEGIN
LOCAL Ixxcθ,Iyycθ,Ixycθ;
	Ixxcθ:=0.5*(Ixxc+Iyyc)+0.5*(Ixxc-Iyyc)*cos(2*θ)-Ixyc*sin(2*θ);
	Iyycθ:=0.5*(Ixxc+Iyyc)-0.5*(Ixxc-Iyyc)*cos(2*θ)+Ixyc*sin(2*θ);
	Ixycθ:=0.5*(Ixxc-Iyyc)*sin(2*θ)+Ixyc*cos(2*θ);
	RETURN {Ixxcθ,Iyycθ,Ixycθ};
END;

calcular()
BEGIN
LOCAL Area:=0;
LOCAL Ixx:=0;
LOCAL Iyy:=0;
LOCAL Ixy:=0;
LOCAL Ixxc:=0;
LOCAL Iyyc:=0;
LOCAL Ixyc:=0;
LOCAL IMax:=0;
LOCAL IMin:=0;
LOCAL θ:=0;
LOCAL Centroide:=(0,0);

LOCAL lista,j,k;
	FOR j FROM 1 TO  4 DO
		lista:=datos(2,j);
		FOR k FROM 1 TO  SIZE(lista) DO
			IF lista(k,3)=1 THEN // Si es área positiva
				Area:=Area+lista(k,2,1);
				Ixx:=Ixx+lista(k,2,6);
				Iyy:=Iyy+lista(k,2,7);
				Ixy:=Ixy+lista(k,2,8);
				Centroide:=(RE(Centroide)+RE(lista(k,2,2))*lista(k,2,1),IM(Centroide)+IM(lista(k,2,2))*lista(k,2,1));
			ELSE
				Area:=Area-lista(k,2,1);
				Ixx:=Ixx-lista(k,2,6);
				Iyy:=Iyy-lista(k,2,7);
				Ixy:=Ixy-lista(k,2,8);
				Centroide:=(RE(Centroide)-RE(lista(k,2,2))*lista(k,2,1),IM(Centroide)-IM(lista(k,2,2))*lista(k,2,1));
			END;
		END;
	END;
	lista:=datos(2,5);
	FOR k FROM 1 TO  SIZE(lista) DO
		Area:=Area+lista(k,2,1);
		Ixx:=Ixx+lista(k,2,6);
		Iyy:=Iyy+lista(k,2,7);
		Ixy:=Ixy+lista(k,2,8);
		Centroide:=(RE(Centroide)+RE(lista(k,2,2))*lista(k,2,1),IM(Centroide)+IM(lista(k,2,2))*lista(k,2,1));
	END;
	IF Area > TOL THEN
		Centroide:=(RE(Centroide)/Area,IM(Centroide)/Area);
		Ixxc:=Ixx-Area*IM(Centroide)^2;
		Iyyc:=Iyy-Area*RE(Centroide)^2;
		Ixyc:=Ixy-Area*RE(Centroide)*IM(Centroide);
		CASE
			IF (ABS(Ixyc)<TOL) AND (ABS(Ixxc-Iyyc)<TOL) THEN
				IMax:=0.5*(Ixxc+Iyyc);
				IMin:=IMax;
				θ:=45;
			END;
			IF ABS(Ixxc-Iyyc)<TOL THEN
				IMax:=0.5*(Ixxc+Iyyc)+Ixyc;
				IMin:=0.5*(Ixxc+Iyyc)-Ixyc;
				θ:=45;
			END;
			DEFAULT 
				IMax:=0.5*(Ixxc+Iyyc+sqrt((Ixxc-Iyyc)^2+4*Ixyc^2));
				IMin:=0.5*(Ixxc+Iyyc-sqrt((Ixxc-Iyyc)^2+4*Ixyc^2));
				θ:=0.5*atan(-2*Ixyc/(Ixxc-Iyyc));
		END;
		RETURN {Area,Centroide,Ixxc,Iyyc,Ixyc,Ixx,Iyy,Ixy,IMax,IMin,θ};
	ELSE
		RETURN SECHP_STRINGFROMID(42);
	END;
END;

menuPrincipal()
BEGIN
	menu:=0;
	// Dibuja menú Principal
	G1:=AFiles("men_abrir.png");
	G2:=AFiles("men_nuevo.png");
	G3:=AFiles("men_eliminar.png");
	G4:=AFiles("men_about.png");
	DIMGROB_P(G5, 52, 21, RGB(255,255,255));
	G6:=AFiles("men_salir.png");
	DRAWMENU(G1,G2,G3,G4,G5,G6);
END;

menuSecundario()
BEGIN
	menu:=1;
	// Dibuja menú Secundario
	G1:=AFiles("men_figuras.png");
	G2:=AFiles("men_guardar.png");
	G3:=AFiles("men_editar.png");
	G4:=AFiles("men_home.png");
	G5:=AFiles("men_cfg.png");
	G6:=AFiles("men_aceptar.png");
	DRAWMENU(G1,G2,G3,G4,G5,G6);
END;

menuFiguras()
BEGIN
	menu:=2;
	// Dibuja menú de Figurasl
	G1:=AFiles("men_circulo.png");
	G2:=AFiles("men_sector.png");
	G3:=AFiles("men_rectangulo.png");
	G4:=AFiles("men_poligono.png");
	G5:=AFiles("men_perfil.png");
	G6:=AFiles("men_volver.png");
	DRAWMENU(G1,G2,G3,G4,G5,G6);
END;

menuEdicionItem()
BEGIN
	menu:=3;
	G1:=AFiles("men_anterior.png");
	G2:=AFiles("men_siguiente.png");
	G3:=AFiles("men_editar.png");
	G4:=AFiles("men_eliminar_dato.png");
	G5:=AFiles("men_info_figura.png");
	G6:=AFiles("men_volver.png");
	DRAWMENU(G1,G2,G3,G4,G5,G6);
END;

menuResultados()
BEGIN
	menu:=4;
	G1:=AFiles("men_tabla.png");
	G2:=AFiles("men_resultados.png");
	DIMGROB_P(G3, 52, 21, RGB(255,255,255));
	DIMGROB_P(G4, 52, 21, RGB(255,255,255));
	DIMGROB_P(G5, 52, 21, RGB(255,255,255));
	G6:=AFiles("men_volver.png");
	DRAWMENU(G1,G2,G3,G4,G5,G6);
END;

pantallaInicio()
BEGIN
	RECT(G7);
	RECT_P(G7,0,0,319,218,RGB(216,233,225),RGB(216,233,255));
	LINE_P(G7,0,218,319,218,RGB(0,0,0));
	BLIT_P(G7);
END;

acercaDe()
BEGIN
	TEXTOUT_P("SecHP v.2.1",G7,100,67,7,RGB(0,0,128));
	TEXTOUT_P("SecHP v.2.1",G7,101,68,7,RGB(0,0,128));
	TEXTOUT_P("©2000-2020 Edwin Córdoba",G7,58,143,4,RGB(0,0,128));
	TEXTOUT_P("©2000-2020 Edwin Córdoba",G7,59,144,4,RGB(0,0,128));
	TEXTOUT_P("edwin.cordoba@gmail.com",G7,78,163,3,RGB(0,0,128));
	G8:=AFiles("icon.png");
	BLIT_P(G7);
	BLIT_P(G0,142,100,180,138,G8);
END;

abrirDatos()
BEGIN
	LOCAL itemSeleccionado:=seleccionarArchivo(SECHP_STRINGFROMID(43));
	IF itemSeleccionado THEN
		datos:=AVars(itemSeleccionado);
		actualizarMinMax();
		dibujarSeccion();
		menuSecundario();
	ELSE
		pantallaInicio();
		menuPrincipal(); 
	END;	
END;



nuevosDatos()
BEGIN
	datos:={{3},{{},{},{},{},{}}};
	mostrarCfg();
	pantallaInicio();
	menuSecundario();
	dibujarSeccion();
END;

guardarDatos()
BEGIN
 LOCAL nArch;
 IF INPUT({{nArch,[2]}},SECHP_STRINGFROMID(44), {SECHP_STRINGFROMID(45)}, {SECHP_STRINGFROMID(46)}, {""}, {"datos"}) THEN
  IFERR AVars(nArch):=datos; THEN
		ventanaMensaje({SECHP_STRINGFROMID(47)},1);
  END;
 END;
 dibujarSeccion();
 menuSecundario();
END;

eliminarDatos()
BEGIN
LOCAL itemSeleccionado:=seleccionarArchivo(SECHP_STRINGFROMID(48));
LOCAL nombres:=AVars;
	IF  itemSeleccionado THEN
		RECT();
		IF ventanaMensaje({SECHP_STRINGFROMID(49)+nombres(itemSeleccionado)+"?"},2) THEN
			DelAVars(itemSeleccionado);	
		END;
	END;
	pantallaInicio();
	menuPrincipal(); 
END;

seleccionarArchivo(titulo)
BEGIN
 LOCAL lArch:=AVars,itemSeleccionado:=0;
  INPUT({{itemSeleccionado,lArch}},titulo,SECHP_STRINGFROMID(50),SECHP_STRINGFROMID(51));
 RETURN itemSeleccionado;
END;

modificarZoom(info) // info={x,y,factor}
BEGIN
	IF PixSize/info(3) <= 0.001 THEN RETURN END; // Para números menores de PixSize de 0.001, la calculadora termina el programa abruptamente
	PixSize:=PixSize/info(3);
	Xmin:=Xmin+info(1)*PixSize*(info(3)-1);
	Ymin:=Ymin+info(2)*PixSize*(info(3)-1);
	xmin:=Xmin;
	xmax:=Xmin+pH*PixSize;
	ymin:=Ymin;
	ymax:=Ymin+pV*PixSize;	
END;

moverSeccion(info) // info={Δx,Δy}
BEGIN
	Xmin:=Xmin-info(1)*PixSize;
	Ymin:=Ymin+info(2)*PixSize;
	xmin:=Xmin;
	xmax:=Xmin+pH*PixSize;
	ymin:=Ymin;
	ymax:=Ymin+pV*PixSize;	
END;

actualizarMinMax()
BEGIN
LOCAL lista,i,j,k,r;
LOCAL relLCD:=pH/pV;// Pixeres reales horizontales/Pixeres reales verticales
MinMax:={(MAXREAL,MAXREAL),(-MAXREAL,-MAXREAL)};
i:=0;
	FOR j FROM 1 TO  5 DO
		lista:=datos(2,j);
		FOR k FROM 1 TO  SIZE(lista) DO
			i:=i+1;
			MinMax:={(MIN(RE(MinMax(1)),RE(lista(k,2,9,1))),MIN(IM(MinMax(1)),IM(lista(k,2,9,1)))),(MAX(RE(MinMax(2)),RE(lista(k,2,9,2))),MAX(IM(MinMax(2)),IM(lista(k,2,9,2))))};
		END;
	END;
	IF i>0 THEN
		r:=(RE(MinMax(2))-RE(MinMax(1)))/(IM(MinMax(2))-IM(MinMax(1)));
		IF r < relLCD THEN
			xmin:=0.5*(RE(MinMax(2))+RE(MinMax(1))-relLCD*(IM(MinMax(2))-IM(MinMax(1))));
			xmax:=0.5*(RE(MinMax(2))+RE(MinMax(1))+relLCD*(IM(MinMax(2))-IM(MinMax(1))));
			ymin:=IM(MinMax(1));
			ymax:=IM(MinMax(2));
			PixSize:=(xmax-xmin)/pH;
			Xmin:=xmin;
			Ymin:=ymin-2*PixSize; // Aumenta dos líneas de pixel en la parte baja
		ELSE
			xmin:=RE(MinMax(1));
			xmax:=RE(MinMax(2));
			ymin:=0.5*(IM(MinMax(2))+IM(MinMax(1))-(RE(MinMax(2))-RE(MinMax(1)))/relLCD);
			ymax:=0.5*(IM(MinMax(2))+IM(MinMax(1))+(RE(MinMax(2))-RE(MinMax(1)))/relLCD);
			PixSize:=(xmax-xmin)/pH;
			Xmin:=xmin;
			Ymin:=ymin-2*PixSize; // Aumenta dos líneas de pixel en la parte baja
		END;
	END;
END;

dibujarSeccion()
BEGIN
generarSeccion();
BLIT(G7);
END;	

generarSeccion()
BEGIN
LOCAL i,k,lista,r;
LOCAL instr:="";
RECT_P(G7,0,0,319,218,colorFondo,colorFondo); // Borra la pantalla
LINE_P(G7,0,218,319,218,RGB(0,0,0));
i:=0;
// Áreas positivas
	lista:=datos(2,1); // Circulos
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			r:=lista(k,1,2)*pH/(xmax-xmin);
			ARC(G7,RE(lista(k,1,1)),IM(lista(k,1,1)),r,{colorLinea,colorLlenado});
			instr:=instr+"S"+i+":= circle("+lista(k,1,1)+","+lista(k,1,2)+"); // c(00800000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":=point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	lista:=datos(2,2); // Sector circular
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			r:=lista(k,1,2)*pH/(xmax-xmin);
			ARC(G7,RE(lista(k,1,1)),IM(lista(k,1,1)),r,-lista(k,1,4) MOD 360,-lista(k,1,3) MOD 360,{colorLinea,colorLlenado});
			instr:=instr+"S"+i+":= circle("+lista(k,1,1)+","+lista(k,1,2)+","+lista(k,1,3)*pi/180+","+lista(k,1,4)*pi/180+"); // c(00800000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	lista:=datos(2,3); // Rectangulo
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			RECT(G7,RE(lista(k,1,1)),IM(lista(k,1,2)),RE(lista(k,1,2)),IM(lista(k,1,1)),colorLinea,colorLlenado);
			instr:=instr+"S"+i+":= rectangle("+lista(k,1,1)+","+(RE(lista(k,1,2)),IM(lista(k,1,1)))+","+(IM(lista(k,1,2))-IM(lista(k,1,1)))/(RE(lista(k,1,2))-RE(lista(k,1,1)))+"); // c(00800000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	lista:=datos(2,4); // Poligono
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=1 THEN //Áreas positivas
			i:=i+1;
			FILLPOLY(G7,lista(k,1,1),colorLlenado);
			polyLine(G7,lista(k,1,1),colorLinea);
			instr:=instr+"S"+i+":= polygon("+lista(k,1,1)+"); // c(00800000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	lista:=datos(2,5); // Perfil
	FOR k FROM 1 TO  SIZE(lista) DO
		i:=i+1;
		FILLPOLY(G7,lista(k,3,1),colorLlenado);
		polyLine(G7,lista(k,3,1),colorLinea);
		instr:=instr+"S"+i+":= polygon("+lista(k,3,1)+"); // c(00800000) v(1) f(1) \n";
		instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
	END;
// **********************************************************  Áreas negativas
	lista:=datos(2,1); // Circulos
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas negativas
			i:=i+1;
			r:=lista(k,1,2)*pH/(xmax-xmin);
			ARC(G7,RE(lista(k,1,1)),IM(lista(k,1,1)),r,{colorLinea,colorFondo});
			instr:=instr+"S"+i+":= circle("+lista(k,1,1)+","+lista(k,1,2)+"); // c(00000000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	lista:=datos(2,2); // Sector circular
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas negativas
			i:=i+1;
			r:=lista(k,1,2)*pH/(xmax-xmin);
			ARC(G7,RE(lista(k,1,1)),IM(lista(k,1,1)),r,-lista(k,1,4) MOD 360,-lista(k,1,3) MOD 360,{colorLinea,colorFondo});
			instr:=instr+"S"+i+":= circle("+lista(k,1,1)+","+lista(k,1,2)+","+lista(k,1,3)*pi/180+","+lista(k,1,4)*pi/180+"); // c(00000000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	lista:=datos(2,3); // Rectangulo
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas negativas
			i:=i+1;
			RECT(G7,RE(lista(k,1,1)),IM(lista(k,1,2)),RE(lista(k,1,2)),IM(lista(k,1,1)),colorLinea,colorFondo);
			instr:=instr+"S"+i+":= rectangle("+lista(k,1,1)+","+(RE(lista(k,1,2)),IM(lista(k,1,1)))+","+(IM(lista(k,1,2))-IM(lista(k,1,1)))/(RE(lista(k,1,2))-RE(lista(k,1,1)))+"); // c(00000000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	lista:=datos(2,4); // Poligono
	FOR k FROM 1 TO  SIZE(lista) DO
		IF lista(k,3)=2 THEN //Áreas negativas
			i:=i+1;
			FILLPOLY(G7,lista(k,1,1),colorFondo);
			polyLine(G7,lista(k,1,1),colorLinea);
			instr:=instr+"S"+i+":= polygon("+lista(k,1,1)+"); // c(00000000) v(1) f(1) \n";
			instr:=instr+"cm"+i+":="+"cm"+i+":= point("+lista(k,2,2)+"); // c(00000080) v(1) \n";
		END;
	END;
	IF cfg_boolMostrarCuadricula THEN
		dibujarCuadricula();
	END;
	IF cfg_boolMostrarEjes THEN
		dibujarEjes();
	END;
	IF cfg_boolMostrarEjesPrincipales THEN
		propiedades:=calcular();
		IF TYPE(propiedades) ==6 THEN
			dibujarEjesPrincipales();
		END;
	END;
	IF cfg_boolMostrarCentroide THEN
		propiedades:=calcular();
		IF TYPE(propiedades) ==6 THEN
			dibujarCentroide(RE(propiedades(2)),IM(propiedades(2)),5,RGB(255,0,0),RGB(255,0,0));
			instr:=instr+"CM:= CM:=point("+propiedades(2)+"); // c(00FF0000) v(1) \n";
		END;
	END;
	Instruction:=instr;
	AVars("datos"):=datos;
END;

dibujarEjes()
BEGIN
LINE(G7,xmin,0,xmax,0,colorEjes);
LINE(G7,xmax-7*PixSize,2*PixSize,xmax,0,colorEjes);
LINE(G7,xmax-7*PixSize,-2*PixSize,xmax,0,colorEjes);
LINE(G7,xmax-7*PixSize,PixSize,xmax,0,colorEjes);
LINE(G7,xmax-7*PixSize,-PixSize,xmax,0,colorEjes);
TEXTOUT("x",G7,xmax-7*PixSize,-PixSize,3,colorEjes);

LINE(G7,0,ymin,0,ymax,colorEjes);
LINE(G7,2*PixSize,ymax-7*PixSize,0,ymax,colorEjes);
LINE(G7,-2*PixSize,ymax-7*PixSize,0,ymax,colorEjes);
LINE(G7,PixSize,ymax-7*PixSize,0,ymax,colorEjes);
LINE(G7,-PixSize,ymax-7*PixSize,0,ymax,colorEjes);
TEXTOUT("y",G7,4*PixSize,ymax+3*PixSize,3,colorEjes);
END;

dibujarCuadricula()
BEGIN
LOCAL k,n,n1,n2,n3;
// Se evalua el rango más adecuado de la cuadricula 
n1:=EVAL(ALOG(ROUND(log10((xmax-xmin)/30),0)));
n2:=EVAL(2*ALOG(ROUND(log10((xmax-xmin)/(2*30)),0)));
n3:=EVAL(5*ALOG(ROUND(log10((xmax-xmin)/(5*30)),0)));
IF ABS((xmax-xmin)/n1-30)< ABS((xmax-xmin)/n2-30) THEN
	IF ABS((xmax-xmin)/n1-30) < ABS((xmax-xmin)/n3-30) THEN
		n:=n1;
	ELSE
		n:=n3;
	END;
ELSE
	IF ABS((xmax-xmin)/n2-30) < ABS((xmax-xmin)/n3-30) THEN
		n:=n2;
	ELSE
		n:=n3;
	END;
END;
Xtick:=n;
Ytick:=n;
FOR k FROM xmin TO  xmax STEP n DO
	LINE(G7,CEILING(k/n)*n,ymin,CEILING(k/n)*n,ymax,colorCuadricula);
END;
FOR k FROM ymin TO  ymax STEP n DO
	LINE(G7,xmin,CEILING(k/n)*n,xmax,CEILING(k/n)*n,colorCuadricula);
END;

TEXTOUT_P("Δ="+n+" "+listaUnidadesLongitud(datos(1,1)),G7,0,209,1,colorEjes);
END;

dibujarCentroide(x,y,radio,colorLineaCentroide,colorLlenadoCentroide)
BEGIN
	ARC(G7,x,y,radio,-90,0,{colorLineaCentroide,colorLlenadoCentroide});
	ARC(G7,x,y,radio,90,180,{colorLineaCentroide,colorLlenadoCentroide});
	ARC(G7,x,y,radio,colorLineaCentroide);
END;

dibujarEjesPrincipales()
BEGIN
	LOCAL xc,yc,θ;
	xc:=RE(propiedades(2));
	yc:=IM(propiedades(2));
	θ:=propiedades(11);
	LINE(G7,xc,yc,xc+50*PixSize*cos(θ),yc+50*PixSize*sin(θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(θ)+2*PixSize*cos(90+θ),yc+43*PixSize*sin(θ)+2*PixSize*sin(90+θ),xc+50*PixSize*cos(θ),yc+50*PixSize*sin(θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(θ)+PixSize*cos(90+θ),yc+43*PixSize*sin(θ)+PixSize*sin(90+θ),xc+50*PixSize*cos(θ),yc+50*PixSize*sin(θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(θ)-2*PixSize*cos(90+θ),yc+43*PixSize*sin(θ)-2*PixSize*sin(90+θ),xc+50*PixSize*cos(θ),yc+50*PixSize*sin(θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(θ)-PixSize*cos(90+θ),yc+43*PixSize*sin(θ)-PixSize*sin(90+θ),xc+50*PixSize*cos(θ),yc+50*PixSize*sin(θ),colorEjesPricipales);

	LINE(G7,xc,yc,xc+50*PixSize*cos(90+θ),yc+50*PixSize*sin(90+θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(90+θ)+2*PixSize*cos(θ),yc+43*PixSize*sin(90+θ)+2*PixSize*sin(θ),xc+50*PixSize*cos(90+θ),yc+50*PixSize*sin(90+θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(90+θ)+PixSize*cos(θ),yc+43*PixSize*sin(90+θ)+PixSize*sin(θ),xc+50*PixSize*cos(90+θ),yc+50*PixSize*sin(90+θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(90+θ)-2*PixSize*cos(θ),yc+43*PixSize*sin(90+θ)-2*PixSize*sin(θ),xc+50*PixSize*cos(90+θ),yc+50*PixSize*sin(90+θ),colorEjesPricipales);
	LINE(G7,xc+43*PixSize*cos(90+θ)-PixSize*cos(θ),yc+43*PixSize*sin(90+θ)-PixSize*sin(θ),xc+50*PixSize*cos(90+θ),yc+50*PixSize*sin(90+θ),colorEjesPricipales);
	TEXTOUT("x'",G7,xc+50*PixSize*cos(θ),yc+50*PixSize*sin(θ),3,colorEjes);
	TEXTOUT("y'",G7,xc+50*PixSize*cos(90+θ),yc+50*PixSize*sin(90+θ),3,colorEjes);
END;



polyLine(ptrGrob,puntos,colorLinea)
BEGIN
	LOCAL k;
	LOCAL nDatos:=SIZE(puntos);
	FOR k FROM 1 TO  nDatos(1)-1 DO
		LINE(ptrGrob,puntos(k,1),puntos(k,2),puntos(k+1,1),puntos(k+1,2),colorLinea);
	END;
	LINE(ptrGrob,puntos(nDatos(1),1),puntos(nDatos(1),2),puntos(1,1),puntos(1,2),colorLinea);
END;

editarItems()
BEGIN 
LOCAL nItemsFiguras,indice,lista,k,r,prop;
LOCAL refPerfil,d,bf,tf,tw,xcPerfil,ycPerfil;
nItemsFiguras:=SIZE(datos(2,1))+SIZE(datos(2,2))+SIZE(datos(2,3))+SIZE(datos(2,4))+SIZE(datos(2,5));
indice:=0;
actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
	CASE
		IF nItemsFiguras==0 THEN
			ventanaMensaje({SECHP_STRINGFROMID(52)},1);
			indiceEdicion(2):=3;
			RETURN;
		END;
		IF nItemsFiguras<indiceEdicion(1) THEN
			indiceEdicion(1):=nItemsFiguras;
		END;
	END;
	RECT_P(G7,0,0,319,218,colorFondo,colorFondo); // Borra la pantalla
	LINE_P(G7,0,218,319,218,RGB(0,0,0));
	// Circulos
	lista:=datos(2,1);
	FOR k FROM 1 TO  SIZE(lista) DO
		indice:=indice+1;
		IF indice==indiceEdicion(1) THEN
			prop:=lista(k,2);
			CASE 
				IF indiceEdicion(2)==1 THEN
					IF editarCirculo({RE(lista(k,1,1)),IM(lista(k,1,1)),lista(k,1,2),lista(k,3)}) THEN
						datos(2,1,k):=procesarCirculo((input_centro_x,input_centro_y),input_radio,input_signo);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==2 THEN
					IF ventanaMensaje({"",SECHP_STRINGFROMID(53),""},2) THEN
						datos(2,1):=suppress(lista,k);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==3 THEN
					ventanaMensaje({"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1))},0);
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				DEFAULT r:=lista(k,1,2)*pH/(xmax-xmin);
				ARC(G7,RE(lista(k,1,1)),IM(lista(k,1,1)),r,{colorLinea,colorEdicion});
				dibujarCuadricula();
				dibujarEjes();
				dibujarCentroide(RE(prop(2)),IM(prop(2)),5,RGB(255,0,0),RGB(255,0,0));
			END;
		END;
	END;
	// Sector circular
	lista:=datos(2,2);
	FOR k FROM 1 TO  SIZE(lista) DO
		indice:=indice+1;
		IF indice==indiceEdicion(1) THEN
			prop:=lista(k,2);
			CASE 
				IF indiceEdicion(2)==1 THEN
					IF editarSectorCircular({RE(lista(k,1,1)),IM(lista(k,1,1)),lista(k,1,2),lista(k,1,3),lista(k,1,4),lista(k,3)}) THEN
						datos(2,2,k):=procesarSectorCircular((input_centro_x,input_centro_y),input_radio,input_θinicial,input_θfinal,input_signo);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==2 THEN
					IF ventanaMensaje({"",SECHP_STRINGFROMID(53),""},2) THEN
						datos(2,2):=suppress(lista,k);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==3 THEN
					ventanaMensaje({"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1))},0);
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				DEFAULT r:=lista(k,1,2)*pH/(xmax-xmin);
				ARC(G7,RE(lista(k,1,1)),IM(lista(k,1,1)),r,-lista(k,1,4) MOD 360,-lista(k,1,3) MOD 360,{colorLinea,colorEdicion});
				dibujarCuadricula();
				dibujarEjes();
				dibujarCentroide(RE(prop(2)),IM(prop(2)),5,RGB(255,0,0),RGB(255,0,0));
			END;
		END;
	END;
	// Rectangulo
	lista:=datos(2,3);
	FOR k FROM 1 TO  SIZE(lista) DO
		indice:=indice+1;
		IF indice==indiceEdicion(1) THEN
			prop:=lista(k,2);
			CASE 
				IF indiceEdicion(2)==1 THEN
					IF editarRectangulo({RE(lista(k,1,1)),IM(lista(k,1,1)),RE(lista(k,1,2)),IM(lista(k,1,2)),lista(k,3)}) THEN
						datos(2,3,k):=procesarRectangulo((input_p1_x,input_p1_y),(input_p2_x,input_p2_y),input_signo);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==2 THEN
					IF ventanaMensaje({"",SECHP_STRINGFROMID(53),""},2) THEN
						datos(2,3):=suppress(lista,k);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==3 THEN
					ventanaMensaje({"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1))},0);
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				DEFAULT RECT(G7,RE(lista(k,1,1)),IM(lista(k,1,2)),RE(lista(k,1,2)),IM(lista(k,1,1)),colorLinea,colorEdicion);
				dibujarCuadricula();
				dibujarEjes();
				dibujarCentroide(RE(prop(2)),IM(prop(2)),5,RGB(255,0,0),RGB(255,0,0));
			END;
		END;
	END;
	// Poligono
	lista:=datos(2,4);
	FOR k FROM 1 TO  SIZE(lista) DO
		indice:=indice+1;
		IF indice==indiceEdicion(1) THEN
			prop:=lista(k,2);
			CASE 
				IF indiceEdicion(2)==1 THEN
					IF editarPoligono({lista(k,1,1),lista(k,3)}) THEN
						datos(2,4,k):=procesarPoligono(input_puntos,input_signo);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==2 THEN
					IF ventanaMensaje({"",SECHP_STRINGFROMID(53),""},2) THEN
						datos(2,4):=suppress(lista,k);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==3 THEN
					ventanaMensaje({"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1))},0);
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				DEFAULT FILLPOLY(G7,lista(k,1,1),colorEdicion);
				polyLine(G7,lista(k,1,1),colorLinea);
				dibujarCuadricula();
				dibujarEjes();
				dibujarCentroide(RE(prop(2)),IM(prop(2)),5,RGB(255,0,0),RGB(255,0,0));
			END;
		END;
	END;
	// Perfiles
	lista:=datos(2,5);
	FOR k FROM 1 TO  SIZE(lista) DO
		indice:=indice+1;
		IF indice==indiceEdicion(1) THEN
			prop:=lista(k,2);
			CASE 
				IF indiceEdicion(2)==1 THEN
					IF editarPerfil(lista(k,1)) THEN
						datos(2,5,k):=procesarPerfil({input_perfil,input_designacion},input_angulo,input_pos_xc,input_pos_yc);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==2 THEN
					IF ventanaMensaje({"",SECHP_STRINGFROMID(53),""},2) THEN
						datos(2,5):=suppress(lista,k);
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				IF indiceEdicion(2)==3 THEN
					CASE
						IF lista(k,1,1,1)== 1 THEN //Perfil W
							refPerfil:=listaPerfilesW(lista(k,1,1,2));
							d:=UVAL(CONVERT(datosPerfilesW(lista(k,1,1,2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							bf:=UVAL(CONVERT(datosPerfilesW(lista(k,1,1,2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							tf:=UVAL(CONVERT(datosPerfilesW(lista(k,1,1,2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							tw:=UVAL(CONVERT(datosPerfilesW(lista(k,1,1,2),2,4),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							ventanaMensaje({"Ref="+refPerfil,"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"d="+d+"_"+listaUnidadesLongitud(datos(1,1)),"bf="+bf+"_"+listaUnidadesLongitud(datos(1,1)),"tf="+tf+"_"+listaUnidadesLongitud(datos(1,1)),"tw="+tw+"_"+listaUnidadesLongitud(datos(1,1))},0);
						END; //
						IF lista(k,1,1,1)== 2 THEN //Perfil S
							refPerfil:=listaPerfilesS(lista(k,1,1,2));
							d:=UVAL(CONVERT(datosPerfilesS(lista(k,1,1,2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							bf:=UVAL(CONVERT(datosPerfilesS(lista(k,1,1,2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							tf:=UVAL(CONVERT(datosPerfilesS(lista(k,1,1,2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							tw:=UVAL(CONVERT(datosPerfilesS(lista(k,1,1,2),2,4),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							ventanaMensaje({"Ref="+refPerfil,"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"d="+d+"_"+listaUnidadesLongitud(datos(1,1)),"bf="+bf+"_"+listaUnidadesLongitud(datos(1,1)),"tf="+tf+"_"+listaUnidadesLongitud(datos(1,1)),"tw="+tw+"_"+listaUnidadesLongitud(datos(1,1))},0);
						END;
						IF lista(k,1,1,1)== 3 THEN //Perfil C
							refPerfil:=listaPerfilesC(lista(k,1,1,2));
							d:=UVAL(CONVERT(datosPerfilesC(lista(k,1,1,2),2,1),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							bf:=UVAL(CONVERT(datosPerfilesC(lista(k,1,1,2),2,2),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							tf:=UVAL(CONVERT(datosPerfilesC(lista(k,1,1,2),2,3),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							tw:=UVAL(CONVERT(datosPerfilesC(lista(k,1,1,2),2,4),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							xcPerfil:=UVAL(CONVERT(datosPerfilesC(lista(k,1,1,2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							ventanaMensaje({"Ref="+refPerfil,"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"d="+d+"_"+listaUnidadesLongitud(datos(1,1)),"bf="+bf+"_"+listaUnidadesLongitud(datos(1,1)),"tf="+tf+"_"+listaUnidadesLongitud(datos(1,1)),"tw="+tw+"_"+listaUnidadesLongitud(datos(1,1)),"↦Xc="+xcPerfil+"_"+listaUnidadesLongitud(datos(1,1))},0);
						END;
						IF lista(k,1,1,1)== 4 THEN //Perfil L lados iguales
							refPerfil:=listaPerfilesLigual(lista(k,1,1,2));
							xcPerfil:=UVAL(CONVERT(datosPerfilesLigual(lista(k,1,1,2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							ycPerfil:=UVAL(CONVERT(datosPerfilesLigual(lista(k,1,1,2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							ventanaMensaje({"Ref="+refPerfil,"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"↦Xc="+xcPerfil+"_"+listaUnidadesLongitud(datos(1,1)),"↥Yc="+ycPerfil+"_"+listaUnidadesLongitud(datos(1,1))},0);
						END;
						IF lista(k,1,1,1)== 5 THEN //Perfil L lados desiguales
							refPerfil:=listaPerfilesLdesigual(lista(k,1,1,2));
							xcPerfil:=UVAL(CONVERT(datosPerfilesLdesigual(lista(k,1,1,2),1,5),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							ycPerfil:=UVAL(CONVERT(datosPerfilesLdesigual(lista(k,1,1,2),1,6),EXPR(0+lista_UnidadesLongitud(datos(1,1)))));
							ventanaMensaje({"Ref="+refPerfil,"A="+prop(1)+"_"+listaUnidadesArea(datos(1,1)),"Xc="+RE(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Yc="+IM(prop(2))+"_"+listaUnidadesLongitud(datos(1,1)),"Ixxc="+prop(3)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyyc="+prop(4)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixyc="+prop(5)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixx="+prop(6)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Iyy="+prop(7)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"Ixy="+prop(8)+"_"+listaUnidadesMomentoInercia(datos(1,1)),"↦Xc="+xcPerfil+"_"+listaUnidadesLongitud(datos(1,1)),"↥Yc="+ycPerfil+"_"+listaUnidadesLongitud(datos(1,1))},0);
						END;
					END;
					menuEdicionItem();
					indiceEdicion(2):=0;
					editarItems();
				END;
				DEFAULT FILLPOLY(G7,lista(k,3,1),colorEdicion);
				polyLine(G7,lista(k,3,1),colorLinea);
				dibujarCuadricula();
				dibujarEjes();
				dibujarCentroide(RE(prop(2)),IM(prop(2)),5,RGB(255,0,0),RGB(255,0,0));
			END;
		END;
	END;
	BLIT_P(G7);
END;

mostrarCfg()
BEGIN
LOCAL lista,k;
	IF INPUT({{cfg_indiceUnidadL,listaUnidadesLongitud,{50,25,1}},{cfg_boolMostrarEjes,1,{70,10,2}},{cfg_boolMostrarCuadricula,1,{70,10,3}},{cfg_boolMostrarCentroide,1,{70,10,4}},{cfg_boolMostrarEjesPrincipales,1,{70,10,5}}},SECHP_STRINGFROMID(54),{SECHP_STRINGFROMID(55),SECHP_STRINGFROMID(56),SECHP_STRINGFROMID(57),SECHP_STRINGFROMID(58),SECHP_STRINGFROMID(59)},{SECHP_STRINGFROMID(60),SECHP_STRINGFROMID(61),SECHP_STRINGFROMID(62),SECHP_STRINGFROMID(63),SECHP_STRINGFROMID(64)},{},{datos(1,1),cfg_boolMostrarEjes,cfg_boolMostrarCuadricula,cfg_boolMostrarCentroide,cfg_boolMostrarEjesPrincipales}) THEN
		datos(1,1):=cfg_indiceUnidadL;
		// Se procesa los perfiles porque se debe actualizar las gráficas, si se cambió las unidades de longitud
		lista:=datos(2,5);
		FOR k FROM 1 TO  SIZE(lista) DO
			datos(2,5,k):=procesarPerfil(lista(k,1,1),lista(k,1,2),lista(k,1,3),lista(k,1,4));
		END;
		actualizarMinMax();puntoMov:={Xmin,Ymin,PixSize};
	END;
END;

//
ventanaMensaje(cadenas,estilo)
BEGIN
LOCAL k,lineas,h;
	lineas:=MIN(SIZE(cadenas),15);
	h:=13*(lineas+2)-1;
	DIMGROB_P(G1, 52, 21, RGB(255,255,255));// para el menu	
	DIMGROB_P(G8,316,h,RGB(183,183,200));
	RECT_P(G8,1,1,314,20,RGB(42,127,255));
	CASE
		IF estilo==0 THEN
			G9:=AFiles("icn_ok.png");
			BLIT_P(G8,2,2,19,19,G9);
			DRAWMENU(G1,G1,G1,G1,G1,STRINGFROMID("Main_OK"));
		END;
		IF estilo==1 THEN
			G9:=AFiles("icn_error.png");
			BLIT_P(G8,2,2,19,19,G9);
			DRAWMENU(G1,G1,G1,G1,G1,STRINGFROMID("Main_OK"));
		END;
		IF estilo==2 THEN
			G9:=AFiles("icn_pregunta.png");
			BLIT_P(G8,2,2,19,19,G9);
			DRAWMENU(STRINGFROMID("Main_CANCEL"),G1,G1,G1,G1,STRINGFROMID("Main_OK"));
		END;
		IF estilo==3 THEN
			G9:=AFiles("icn_reloj.png");
			BLIT_P(G8,2,2,19,19,G9);
		END;
	END;
	FOR k FROM 1 TO lineas DO
		TEXTOUT_P(cadenas(k),G8,5,13*(k+1)-6,3);
	END;
	BLIT_P(G0,2,110-0.5*h,317,110+0.5*h,G8);
	IF estilo==3 THEN
		RETURN;
	END;
	REPEAT
	WAIT(−1);// espera por un evento en la pantalla o teclado
	datoMouse:=MOUSE();
	IF SIZE(datoMouse(1))>0 THEN
		CASE
			IF estilo==0 THEN
				IF eventoMenu()==6 THEN
					RETURN(1);
				END;
			END;
			IF estilo==1 THEN
				IF eventoMenu()==6 THEN
					RETURN(1);
				END;
			END;
			IF estilo==2 THEN
				IF eventoMenu()==1 THEN
					RETURN(0);
				END;
				IF eventoMenu()==6 THEN
					RETURN(1);
				END;
			END;
		END;
	END;
	UNTIL 0;
END;

// Subrutinas pantalla touch

eventoMenu()
BEGIN
 IF datoMouse(1,5)== 1 THEN
  return IP(datoMouse(1,1)*3/160)+1;
 ELSE
  return 0;
 END; 
END;

eventoArrastrar()
BEGIN
 IF datoMouse(1,5)== 2 THEN
  return ({datoMouse(1,1)-datoMouse(1,3),datoMouse(1,2)-datoMouse(1,4)});
 ELSE
  return {};
 END; 
END;

eventoAlargar()
BEGIN
 IF datoMouse(1,5)==3 AND SIZE(datoMouse(2)>0)  THEN
  return ({0.5*(datoMouse(1,3)+datoMouse(2,3)),0.5*(datoMouse(1,4)+datoMouse(2,4)),ABS((datoMouse(1,1)-datoMouse(2,1),datoMouse(1,2)-datoMouse(2,2)))/ABS((datoMouse(1,3)-datoMouse(2,3),datoMouse(1,4)-datoMouse(2,4)))});
 ELSE
  return {};
 END; 
END;